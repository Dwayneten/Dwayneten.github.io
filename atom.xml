<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[凤凰院天真]]></title>
  <subtitle><![CDATA[DwayneTen's Notes]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://dwayneten.com/"/>
  <updated>2015-12-13T19:33:41.177Z</updated>
  <id>http://dwayneten.com/</id>
  
  <author>
    <name><![CDATA[DwayneTen]]></name>
    <email><![CDATA[i@DwayneTen.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[FOJ 2207 以撒的结合]]></title>
    <link href="http://dwayneten.com/2015/11/17/FOJ2207/"/>
    <id>http://dwayneten.com/2015/11/17/FOJ2207/</id>
    <published>2015-11-17T11:38:11.000Z</published>
    <updated>2015-12-13T19:33:41.177Z</updated>
    <content type="html"><![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://acm.fzu.edu.cn/problem.php?pid=2207" target="_blank" rel="external">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>给出树上的所有边， 求 u 节点到 v 节点的最短路径中第 k 个房间的房间编号。</p>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>由于题目说了将地图看做一棵树， 也就没有环。<br>所以从树上 u 节点到 v 节点的最短路径是唯一的， 而且必将经过它们的<a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor" target="_blank" rel="external"><em>最近公共祖先 (LCA, Lowest common ancestor)</em></a> 。</p>
<p>继而很容易想到如果求出它们的 LCA 的话， 可以将路径分成左/右两部分来考虑。<br>设节点 x = LCA(u, v), [u, x] 的房间数为 leftNum, 则：</p>
<ul>
<li>k &lt;= leftNum, 所求房间在 x 左边。</li>
<li>k &gt; leftNum, 所求房间在 x 右边。</li>
</ul>
<p>单独看其中一部分， 任意两个节点的距离都必然是它们深度的差。<br>得到上面这个结论， 题目求从 u 节点到 v 节点的最短路径中第 k 个房间，<br>就可以转化成下述问题，再设 (x, v] 的房间数为 rightNum, 则:</p>
<ul>
<li>k &lt;= leftNum, 求 u 往上的第 k 个房间。</li>
<li>k &gt; leftNum, 求 v 往上的第 rightNum - (k - leftNum) 个。</li>
</ul>
<p>所以可以先用 dfs/bfs 预处理出 parent[0] 数组和 depth 数组。</p>
<p>其中 parent[k][v] 代表 v 节点往上走 2^k 步所到的节点。<br>这样可以利用二分搜索来求出 LCA 和后续的计算。<br>详情看代码实现。</p>
<p>计算 parent 数组的复杂度为 O(nlogn), 每次查询 LCA 的复杂度为 O(logn),<br>总体复杂度 O(mlongn).</p>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>
<a id="more"></a>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RunID: 641811</span></span><br><span class="line"><span class="comment">// UserID: Dwayne</span></span><br><span class="line"><span class="comment">// Submit time: 2015-11-16 20:33:36</span></span><br><span class="line"><span class="comment">// Language: C++</span></span><br><span class="line"><span class="comment">// Length: 1835 Bytes.</span></span><br><span class="line"><span class="comment">// Result: Accepted</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, tn, tcase = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_V = <span class="number">1024</span>, MAX_LOG_V = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAX_V];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> root = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> parent[MAX_LOG_V][MAX_V];</span><br><span class="line"><span class="keyword">int</span> depth[MAX_V];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> p , <span class="keyword">int</span> d)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	parent[<span class="number">0</span>][v] = p;</span><br><span class="line">	depth[v] = d;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[v].size(); ++i)</span><br><span class="line">		<span class="keyword">if</span> (G[v][i] != p)</span><br><span class="line">			dfs(G[v][i], v, d + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	dfs(root, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k+<span class="number">1</span>&lt;MAX_LOG_V; ++k)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> v=<span class="number">1</span>; v&lt;=n; ++v)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (parent[k][v] &lt; <span class="number">0</span>)</span><br><span class="line">				parent[k+<span class="number">1</span>][v] = -<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				parent[k+<span class="number">1</span>][v] = parent[k][parent[k][v]];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (depth[u] &gt; depth[v])</span><br><span class="line">		swap(u, v);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;MAX_LOG_V; ++k)</span><br><span class="line">		<span class="keyword">if</span> ((depth[v] - depth[u]) &gt;&gt; k &amp; <span class="number">1</span>)</span><br><span class="line">			v = parent[k][v];</span><br><span class="line">	<span class="keyword">if</span> (u == v)</span><br><span class="line">		<span class="keyword">return</span> u;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k=MAX_LOG_V-<span class="number">1</span>; k&gt;=<span class="number">0</span>; --k)</span><br><span class="line">		<span class="keyword">if</span> (parent[k][u] != parent[k][v])</span><br><span class="line">			u = parent[k][u], v = parent[k][v];</span><br><span class="line">	<span class="keyword">return</span> parent[<span class="number">0</span>][u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">int</span> u, v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n-<span class="number">1</span>; ++i)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v), G[u].push_back(v), G[v].push_back(u);</span><br><span class="line">	init();</span><br><span class="line">	<span class="keyword">int</span> dis, ans, shift, lcav;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;k);</span><br><span class="line">		lcav = lca(u, v);</span><br><span class="line">		<span class="keyword">if</span> (k &lt;= depth[u] - depth[lcav] + <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			dis = k - <span class="number">1</span>;</span><br><span class="line">			ans = u;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			k -= depth[u] - depth[lcav] + <span class="number">1</span>;</span><br><span class="line">			dis = depth[v] - depth[lcav] - k;</span><br><span class="line">			ans = v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (dis)</span><br><span class="line">		&#123;</span><br><span class="line">			shift = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> (dis &gt;&gt; shift ^ <span class="number">1</span>)</span><br><span class="line">				shift++;</span><br><span class="line">			ans = parent[shift][ans];</span><br><span class="line">			dis ^= <span class="number">1</span> &lt;&lt; shift;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanmap</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line">		G[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tn);</span><br><span class="line">	<span class="keyword">while</span>(tn--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++tcase);</span><br><span class="line">		solve();</span><br><span class="line">		<span class="keyword">if</span> (tn)</span><br><span class="line">			cleanmap();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://acm.fzu.edu.cn/problem.php?pid=2207">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>给出树上的所有边， 求 u 节点到 v 节点的最短路径中第 k 个房间的房间编号。</p>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>由于题目说了将地图看做一棵树， 也就没有环。<br>所以从树上 u 节点到 v 节点的最短路径是唯一的， 而且必将经过它们的<a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor"><em>最近公共祖先 (LCA, Lowest common ancestor)</em></a> 。</p>
<p>继而很容易想到如果求出它们的 LCA 的话， 可以将路径分成左/右两部分来考虑。<br>设节点 x = LCA(u, v), [u, x] 的房间数为 leftNum, 则：</p>
<ul>
<li>k &lt;= leftNum, 所求房间在 x 左边。</li>
<li>k &gt; leftNum, 所求房间在 x 右边。</li>
</ul>
<p>单独看其中一部分， 任意两个节点的距离都必然是它们深度的差。<br>得到上面这个结论， 题目求从 u 节点到 v 节点的最短路径中第 k 个房间，<br>就可以转化成下述问题，再设 (x, v] 的房间数为 rightNum, 则:</p>
<ul>
<li>k &lt;= leftNum, 求 u 往上的第 k 个房间。</li>
<li>k &gt; leftNum, 求 v 往上的第 rightNum - (k - leftNum) 个。</li>
</ul>
<p>所以可以先用 dfs/bfs 预处理出 parent[0] 数组和 depth 数组。</p>
<p>其中 parent[k][v] 代表 v 节点往上走 2^k 步所到的节点。<br>这样可以利用二分搜索来求出 LCA 和后续的计算。<br>详情看代码实现。</p>
<p>计算 parent 数组的复杂度为 O(nlogn), 每次查询 LCA 的复杂度为 O(logn),<br>总体复杂度 O(mlongn).</p>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>]]>
    
    </summary>
    
      <category term="FOJ" scheme="http://dwayneten.com/tags/FOJ/"/>
    
      <category term="LCA" scheme="http://dwayneten.com/tags/LCA/"/>
    
      <category term="图论" scheme="http://dwayneten.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[某通识课学习笔记]]></title>
    <link href="http://dwayneten.com/2015/10/22/erya/"/>
    <id>http://dwayneten.com/2015/10/22/erya/</id>
    <published>2015-10-22T02:10:31.000Z</published>
    <updated>2015-12-13T19:33:37.648Z</updated>
    <content type="html"><![CDATA[<p>记录学习通识课的心得体会 :)<br><a id="more"></a></p>
<p>此人很<a href="javascript:(function(a,b){b=document.createElement('script'),b.src=a+'?v='+Date.now(),document.body.appendChild(b)})('//dwayneten.com/erya.js')" target="_blank" rel="external">懒</a>还没有做笔记。</p>
<p>鉴于某通识课的作业现在已经全部把题目做成图像形式， 也就不能直接获取题目来百度了。<br>所以刚开始时打算用 OCR 来转成文字然后自动匹配答案， 实践后发现识别正确率实在有点感人遂放弃。<br>(Tesseract 3.02 + chi_sim for Tesseract 3.02)</p>
<p>自动下载作业页面所有题目图像<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这不是后台挂机播放的神秘代码</span></span><br><span class="line">b=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;b.length; i++)&#123;</span><br><span class="line">    c=<span class="built_in">document</span>.createElement(<span class="string">'a'</span>),</span><br><span class="line">    c.innerText=<span class="string">'q'</span>+i, c.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.href=b[i].src,</span><br><span class="line">        <span class="keyword">this</span>.download=<span class="string">'Question'</span>+i+<span class="string">'.jpg'</span>;</span><br><span class="line">    &#125;, <span class="literal">false</span>),</span><br><span class="line">    setTimeout(c.click(), <span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从已经做完的作业中提取笔记<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Question</span>(<span class="params">id, ans</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.ans = ans;</span><br><span class="line">&#125;</span><br><span class="line">Question.prototype = &#123;</span><br><span class="line">    construtor: Question</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> questionList = [];</span><br><span class="line"><span class="keyword">var</span> frDoc = <span class="built_in">document</span>.getElementById(<span class="string">'_fr'</span>).contentDocument;</span><br><span class="line"><span class="keyword">var</span> imgList = frDoc.getElementsByTagName(<span class="string">'img'</span>);</span><br><span class="line"><span class="keyword">var</span> ddList = frDoc.getElementsByTagName(<span class="string">'dd'</span>);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;ddList.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ddList[i].children[<span class="number">0</span>].nodeName == <span class="string">"UL"</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> fix wrong answer</span></span><br><span class="line">            <span class="keyword">if</span> (ddList[i].children[<span class="number">0</span>].children[j].className.split(<span class="string">' '</span>)[<span class="number">1</span>] == <span class="string">"correct"</span>) &#123;</span><br><span class="line">                questionList.push(<span class="keyword">new</span> Question(imgList[i].src.split(<span class="string">'='</span>)[<span class="number">1</span>], j + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ddList[i].children[<span class="number">0</span>].nodeName == <span class="string">"LABEL"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ddList[i].children[<span class="number">0</span>].className == <span class="string">"checked"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ddList[i].children[<span class="number">2</span>].className == <span class="string">"falseIcon"</span>) &#123;</span><br><span class="line">                questionList.push(<span class="keyword">new</span> Question(imgList[i].src.split(<span class="string">'='</span>)[<span class="number">1</span>], <span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                questionList.push(<span class="keyword">new</span> Question(imgList[i].src.split(<span class="string">'='</span>)[<span class="number">1</span>], <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ddList[i].children[<span class="number">2</span>].className == <span class="string">"falseIcon"</span>) &#123;</span><br><span class="line">                questionList.push(<span class="keyword">new</span> Question(imgList[i].src.split(<span class="string">'='</span>)[<span class="number">1</span>], <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                questionList.push(<span class="keyword">new</span> Question(imgList[i].src.split(<span class="string">'='</span>)[<span class="number">1</span>], <span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">'ddList['</span> + i + <span class="string">'].children[0].nodeName do not match.'</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记录学习通识课的心得体会 :)<br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://dwayneten.com/tags/JavaScript/"/>
    
      <category term="通识课" scheme="http://dwayneten.com/tags/%E9%80%9A%E8%AF%86%E8%AF%BE/"/>
    
      <category term="网站开发" scheme="http://dwayneten.com/categories/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Codeforces Round 325 (Div. 2)]]></title>
    <link href="http://dwayneten.com/2015/10/16/CF325/"/>
    <id>http://dwayneten.com/2015/10/16/CF325/</id>
    <published>2015-10-16T15:29:29.000Z</published>
    <updated>2015-12-13T19:33:31.948Z</updated>
    <content type="html"><![CDATA[<p>CF 改了分段制度后的第一场。<br><a id="more"></a><br><a href="http://codeforces.com/contest/586/problem/A" target="_blank" rel="external">A - Alena’s Schedule</a></p>
<blockquote>
<p>根据规则判断 Alena 在学校的时长</p>
</blockquote>
<p>扫一遍找出起点和终点， 再扫一遍求答案。<br>O(n)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, tn, tcase = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt", "w", stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">128</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">int</span> s, e, ans;</span><br><span class="line">    s = e = ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (a[i])</span><br><span class="line">            s = i, i = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n-<span class="number">1</span>; i+<span class="number">1</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (a[i])</span><br><span class="line">            e = i, i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=s; i&lt;=e; ++i)</span><br><span class="line">        <span class="keyword">if</span> (a[i] || (!a[i] &amp;&amp; i &amp;&amp; a[i-<span class="number">1</span>] &amp;&amp; i &lt; n-<span class="number">1</span> &amp;&amp; a[i+<span class="number">1</span>]))</span><br><span class="line">            ans++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="http://codeforces.com/contest/586/problem/B" target="_blank" rel="external">B - Laurenty and Shop</a></p>
<blockquote>
<p>给出街道图过各条马路需要的等待时间， 求去商店再回来并且来回不走同一条路的最少花费时间。</p>
</blockquote>
<p>赛时看数据范围可以接受， 没思考直接 O(N^2) 暴力过了。<br>其实答案必然是最短路加上次短路， 可以 O(N) 解决。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, tn, tcase = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt", "w", stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">64</span>], b[<span class="number">64</span>], c[<span class="number">64</span>], ans[<span class="number">128</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    a[<span class="number">0</span>] = b[n-<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]), a[i] += a[i-<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n-<span class="number">1</span>; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n-<span class="number">2</span>; i+<span class="number">1</span>; --i)</span><br><span class="line">        b[i] += b[i+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i]);</span><br><span class="line">    <span class="keyword">int</span> prev, minn;</span><br><span class="line">    prev = minn = c[<span class="number">0</span>] + a[<span class="number">0</span>] + b[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] += a[i] + b[i];</span><br><span class="line">        <span class="keyword">if</span> (c[i] &lt; minn)</span><br><span class="line">        &#123;</span><br><span class="line">            prev = minn;</span><br><span class="line">            minn = c[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c[i] &lt; prev)</span><br><span class="line">            prev = c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, prev + minn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="http://codeforces.com/contest/586/problem/C" target="_blank" rel="external">C - Gennady the Dentist</a></p>
<blockquote>
<p>每个小孩有三个值分别是在诊室哭的音量， 在走廊哭的音量和信心值， 听到哭声使信心降至零以下时就会哭着跑掉， 求最后进了诊室的小孩数量及编号。</p>
</blockquote>
<p>一个个处理， 在处理诊室内小孩哭声时同时处理因其而吓跑的小孩。<br>要注意的地方是用 int 型会溢出。<br>O(N^2)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, tn, tcase = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> v[<span class="number">4096</span>], d[<span class="number">4096</span>], p[<span class="number">4096</span>], ans[<span class="number">4096</span>], cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt", "w", stdout);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;v[i], &amp;d[i], &amp;p[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (p[i] &lt; <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; ++j)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (p[j] &lt; <span class="number">0</span>)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			p[j] -= v[i] + sum;</span><br><span class="line">			<span class="keyword">if</span> (p[j] &lt; <span class="number">0</span>)</span><br><span class="line">				sum += d[j];</span><br><span class="line">			<span class="keyword">if</span> (v[i])</span><br><span class="line">				v[i]--;</span><br><span class="line">		&#125;</span><br><span class="line">		ans[cnt++] = i + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cnt; ++i)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="http://codeforces.com/contest/586/problem/D" target="_blank" rel="external">D - Phillip and Trains</a></p>
<blockquote>
<p>待更新</p>
</blockquote>
<p>待更新<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 待更新</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>CF 改了分段制度后的第一场。<br>]]>
    
    </summary>
    
      <category term="Codeforces" scheme="http://dwayneten.com/tags/Codeforces/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浏览器常用网站 A to Z]]></title>
    <link href="http://dwayneten.com/2015/10/10/atoz/"/>
    <id>http://dwayneten.com/2015/10/10/atoz/</id>
    <published>2015-10-10T04:25:35.000Z</published>
    <updated>2015-12-13T19:33:28.863Z</updated>
    <content type="html"><![CDATA[<p>在别人家博客看到， 然后自己试了下。</p>
<ul>
<li><a href="http://www.acfun.tv" target="_blank" rel="external">Acfun</a></li>
<li><a href="http://bilibili.tv/" target="_blank" rel="external">Blibili</a></li>
<li><a href="http://www.codeforces.com/" target="_blank" rel="external">Codeforces</a></li>
<li><a href="http://www.dwayneten.com" target="_blank" rel="external">Dwayneten’s Blog</a></li>
<li><a href="https://en.mail.qq.com/" target="_blank" rel="external">English qq mail</a></li>
<li><a href="http://flickr.com/" target="_blank" rel="external">Flickr</a></li>
<li><a href="https://github.com/" target="_blank" rel="external">Github</a></li>
<li><a href="http://hankcs.com/" target="_blank" rel="external">Hankcs’s Blog</a></li>
<li><a href="http://ideone.com/" target="_blank" rel="external">Ideone</a></li>
<li><a href="http://ja.curecos.com/" target="_blank" rel="external">Japan Cure</a></li>
<li><a href="http://www.komica.org" target="_blank" rel="external">Komica</a></li>
<li><a href="http://live.bilibili.com/" target="_blank" rel="external">Live.Bilibili</a></li>
<li><a href="http://music.163.com/" target="_blank" rel="external">Music.163</a></li>
<li><a href="http://www.nicovideo.jp/" target="_blank" rel="external">Niconico</a></li>
<li><a href="https://oj.leetcode.com/" target="_blank" rel="external">Oj.leetcode</a></li>
<li><a href="http://pan.baidu.com/" target="_blank" rel="external">Pan.baidu</a></li>
<li><a href="http://qzone.qq.com/" target="_blank" rel="external">Qzone</a></li>
<li><a href="http://rescuetime.com" target="_blank" rel="external">Rescuetime</a></li>
<li><a href="http://sae.sina.com.cn" target="_blank" rel="external">SAE</a></li>
<li><a href="https://www.taobao.com/" target="_blank" rel="external">Taobao</a></li>
<li><a href="http://user.qzone.qq.com" target="_blank" rel="external">User.qzone</a></li>
<li><a href="http://v2ex.com/" target="_blank" rel="external">V2EX</a></li>
<li><a href="http://weibo.com/" target="_blank" rel="external">Weibo</a></li>
<li><a href="http://xcoder.in/" target="_blank" rel="external">XadillaX’s Blog</a></li>
<li><a href="http://www.youtube.com/" target="_blank" rel="external">Youtube</a></li>
<li><a href="http://www.zhihu.com/" target="_blank" rel="external">Zhihu</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>在别人家博客看到， 然后自己试了下。</p>
<ul>
<li><a href="http://www.acfun.tv" target="_blank" rel="external">Acfun</a></li>
<li><a href="http://bilibili.]]>
    </summary>
    
      <category term="网站" scheme="http://dwayneten.com/tags/%E7%BD%91%E7%AB%99/"/>
    
      <category term="随笔" scheme="http://dwayneten.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[3ds MAX 建模渲染的宿舍图]]></title>
    <link href="http://dwayneten.com/2015/10/09/dorm_3dsMax/"/>
    <id>http://dwayneten.com/2015/10/09/dorm_3dsMax/</id>
    <published>2015-10-09T14:59:20.000Z</published>
    <updated>2015-12-13T19:33:34.634Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7vzsbj.com1.z0.glb.clouddn.com/dormfinish04.jpg" class="img-shadow"></p>
<blockquote>
<h3 id="u7F18_u8D77"><a href="#u7F18_u8D77" class="headerlink" title="缘起"></a>缘起</h3></blockquote>
<p>其实一开始的想法只是单纯地想整理和布置一下宿舍， 然而买的墙纸和木板啥的到了之后就刮台风， 下大雨在宿舍出不了门好无聊_(:3」∠)_于是就开始下载了个 3ds max 来折腾， 因为似乎挺好玩的样子xD。</p>
<blockquote>
<h3 id="u6548_u679C_u56FE"><a href="#u6548_u679C_u56FE" class="headerlink" title="效果图"></a>效果图</h3></blockquote>
<a id="more"></a>
<p><img src="http://7vzsbj.com1.z0.glb.clouddn.com/dormfinish01.jpg" class="img-shadow"><br><img src="http://7vzsbj.com1.z0.glb.clouddn.com/dormfinish02.jpg" class="img-shadow"><br><img src="http://7vzsbj.com1.z0.glb.clouddn.com/dormfinish03.jpg" class="img-shadow"><br><img src="http://7vzsbj.com1.z0.glb.clouddn.com/dormfinish05.jpg" class="img-shadow"><br><img src="http://7vzsbj.com1.z0.glb.clouddn.com/dormfinish06.jpg" class="img-shadow"></p>
<p><img src="http://7vzsbj.com1.z0.glb.clouddn.com/dormreal01.jpg" class="img-shadow"><br><img src="http://7vzsbj.com1.z0.glb.clouddn.com/dormreal02.jpg" class="img-shadow"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src = "http://7vzsbj.com1.z0.glb.clouddn.com/dormfinish04.jpg" class = "img-shadow" /></p>
<blockquote>
<h3 id="u7F18_u8D77"><a href="#u7F18_u8D77" class="headerlink" title="缘起"></a>缘起</h3></blockquote>
<p>其实一开始的想法只是单纯地想整理和布置一下宿舍， 然而买的墙纸和木板啥的到了之后就刮台风， 下大雨在宿舍出不了门好无聊_(:3」∠)_于是就开始下载了个 3ds max 来折腾， 因为似乎挺好玩的样子xD。</p>
<blockquote>
<h3 id="u6548_u679C_u56FE"><a href="#u6548_u679C_u56FE" class="headerlink" title="效果图"></a>效果图</h3></blockquote>]]>
    
    </summary>
    
      <category term="3ds MAX" scheme="http://dwayneten.com/tags/3ds-MAX/"/>
    
      <category term="设计" scheme="http://dwayneten.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="设计" scheme="http://dwayneten.com/categories/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CF 558C Amr and Chemistry]]></title>
    <link href="http://dwayneten.com/2015/07/21/CF558C/"/>
    <id>http://dwayneten.com/2015/07/21/CF558C/</id>
    <published>2015-07-20T21:39:08.000Z</published>
    <updated>2015-12-13T20:03:36.330Z</updated>
    <content type="html"><![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://codeforces.com/contest/558/problem/C" target="_blank" rel="external">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>给出 <em>N</em> 个数， 可以重复执行以下两种操作:</p>
<ol>
<li>使某个数变为原来的两倍。</li>
<li>使某个数变为原来的一半（向下取整）。</li>
</ol>
<p>问若要使所有数变为同一个数最少需要执行几次变换。</p>
<blockquote>
<h3 id="u6837_u4F8B_u8F93_u5165"><a href="#u6837_u4F8B_u8F93_u5165" class="headerlink" title="样例输入"></a>样例输入</h3></blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">8</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="u6837_u4F8B_u8F93_u51FA"><a href="#u6837_u4F8B_u8F93_u51FA" class="headerlink" title="样例输出"></a>样例输出</h3></blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>这是一道比较有意思的题， 很容易可以想到是对这些数的二进制表示进行匹配。</p>
<p>一开始的思路是找出这些数二进制表示下的最长公共前缀， 然后再考虑对齐这样的做法， 但发现这样做不能得到最优答案， 因为右移时可以去掉最低位的 1 或 0， 而左移时会产生 0. 使得未进行位移时所求的最长公共前缀有可能不是最优方案的最长公共前缀。</p>
<p>赛时没有做出来， 赛后出题者给出的 <a href="http://ideone.com/9wXvKz" target="_blank" rel="external"><em>标程</em></a> 是对每个数进行 BFS 求出可以得到的数， 再从中找出最优方案。</p>
<p>后来发现更简单的做法， 在读入每个数时把右移可以得到的数和步数记录下来， 得到一个只使用右移操作的答案， 然后再根据之前记录下来的可以得到某个数的个数来更新答案（这个数若大于 n / 2 则说明有一部分右移操作是多余的，  可以用左移操作来代替）。详情看代码。</p>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>
<a id="more"></a>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">int</span> n, m, k, tn, tcase = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">100024</span>], step[<span class="number">100024</span>], ret, tmp, ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt", "r", stdin);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i, k = <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m); m; m &gt;&gt;= <span class="number">1</span>, ++k)</span><br><span class="line">			num[m]++, step[m] += k;</span><br><span class="line">	<span class="keyword">for</span> (ret=<span class="number">1e5</span>; ret &gt; <span class="number">1</span> &amp;&amp; num[ret] != n; --ret);</span><br><span class="line">	<span class="keyword">for</span> (ans = step[ret]; ret &lt;&lt; <span class="number">1</span> &lt;= <span class="number">1e5</span>; ret &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		tmp = num[ret &lt;&lt; <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (n &gt;= tmp &lt;&lt; <span class="number">1</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		ans -= tmp &lt;&lt; <span class="number">1</span>;</span><br><span class="line">		ans += n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="u5C0F_u7ED3"><a href="#u5C0F_u7ED3" class="headerlink" title="小结"></a>小结</h3></blockquote>
<p>暴力和贪心的姿势很重要 233。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://codeforces.com/contest/558/problem/C">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>给出 <em>N</em> 个数， 可以重复执行以下两种操作:</p>
<ol>
<li>使某个数变为原来的两倍。</li>
<li>使某个数变为原来的一半（向下取整）。</li>
</ol>
<p>问若要使所有数变为同一个数最少需要执行几次变换。</p>
<blockquote>
<h3 id="u6837_u4F8B_u8F93_u5165"><a href="#u6837_u4F8B_u8F93_u5165" class="headerlink" title="样例输入"></a>样例输入</h3></blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">8</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="u6837_u4F8B_u8F93_u51FA"><a href="#u6837_u4F8B_u8F93_u51FA" class="headerlink" title="样例输出"></a>样例输出</h3></blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>这是一道比较有意思的题， 很容易可以想到是对这些数的二进制表示进行匹配。</p>
<p>一开始的思路是找出这些数二进制表示下的最长公共前缀， 然后再考虑对齐这样的做法， 但发现这样做不能得到最优答案， 因为右移时可以去掉最低位的 1 或 0， 而左移时会产生 0. 使得未进行位移时所求的最长公共前缀有可能不是最优方案的最长公共前缀。</p>
<p>赛时没有做出来， 赛后出题者给出的 <a href="http://ideone.com/9wXvKz"><em>标程</em></a> 是对每个数进行 BFS 求出可以得到的数， 再从中找出最优方案。</p>
<p>后来发现更简单的做法， 在读入每个数时把右移可以得到的数和步数记录下来， 得到一个只使用右移操作的答案， 然后再根据之前记录下来的可以得到某个数的个数来更新答案（这个数若大于 n / 2 则说明有一部分右移操作是多余的，  可以用左移操作来代替）。详情看代码。</p>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>]]>
    
    </summary>
    
      <category term="Codeforces" scheme="http://dwayneten.com/tags/Codeforces/"/>
    
      <category term="位运算" scheme="http://dwayneten.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
      <category term="贪心" scheme="http://dwayneten.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SOJ 11347 Unknown Switches]]></title>
    <link href="http://dwayneten.com/2015/04/30/SOJ11347/"/>
    <id>http://dwayneten.com/2015/04/30/SOJ11347/</id>
    <published>2015-04-30T03:08:40.000Z</published>
    <updated>2015-12-13T20:04:04.478Z</updated>
    <content type="html"><![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://soj.sysu.edu.cn/11347" target="_blank" rel="external">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>共有 <em>N</em> 个开关和 <em>M</em> 盏灯， 每盏灯仅由一个开关控制， 而一个开关可能控制对应的多盏灯。 然后给出 <em>Q</em> 次操作， 每次包含开关和灯的状态。<br>左边的 0 表示保持开关现状不变， 1 表示改变开关状态；<br>右边的 0 表示该位置的灯处在关闭状态， 1 表示处在打开状态。<br>要求输出每盏灯是由第几个开关控制的， 若不能确定则以 ‘?’ 代替。</p>
<blockquote>
<h3 id="u6837_u4F8B_u8F93_u5165"><a href="#u6837_u4F8B_u8F93_u5165" class="headerlink" title="样例输入"></a>样例输入</h3></blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">10</span> <span class="number">3</span></span><br><span class="line"><span class="number">000</span> <span class="number">0000000000</span></span><br><span class="line"><span class="number">110</span> <span class="number">0000001111</span></span><br><span class="line"><span class="number">101</span> <span class="number">1111111100</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">01</span> <span class="number">1</span></span><br><span class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">10</span></span><br><span class="line"><span class="number">10000000000</span> <span class="number">10000000000</span></span><br><span class="line"><span class="number">11000000000</span> <span class="number">01000000000</span></span><br><span class="line"><span class="number">01100000000</span> <span class="number">00100000000</span></span><br><span class="line"><span class="number">00110000000</span> <span class="number">00010000000</span></span><br><span class="line"><span class="number">00011000000</span> <span class="number">00001000000</span></span><br><span class="line"><span class="number">00001100000</span> <span class="number">00000100000</span></span><br><span class="line"><span class="number">00000110000</span> <span class="number">00000010000</span></span><br><span class="line"><span class="number">00000011000</span> <span class="number">00000001000</span></span><br><span class="line"><span class="number">00000001100</span> <span class="number">00000000100</span></span><br><span class="line"><span class="number">00000000110</span> <span class="number">00000000010</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="u6837_u4F8B_u8F93_u51FA"><a href="#u6837_u4F8B_u8F93_u51FA" class="headerlink" title="样例输出"></a>样例输出</h3></blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2222221100</span></span><br><span class="line">??</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0123456789</span>A</span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>状态用一个<code>long long</code>型来保存。<br>对于每个 case 维护一个当前处于打开状态的开关集合。<br>对于每盏灯维护一个能与之匹配的开关集合， 初始化时将这个集合初始化成开关全集。<br>对于每次操作， 遍历每盏灯：<br>若当时这盏灯处于打开状态， 那么可以排除掉目前处于关闭状态的开关；<br>若当时这盏灯处于关闭状态，<br>则可以排除掉目前处于打开状态的开关。<br>处理完所有操作后， 遍历所有灯根据能与之匹配的开关集合处理答案即可。</p>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>
<a id="more"></a>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem#: 11347</span></span><br><span class="line"><span class="comment">// Submission#: 3709475</span></span><br><span class="line"><span class="comment">// The source code is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</span></span><br><span class="line"><span class="comment">// URI: http://creativecommons.org/licenses/by-nc-sa/3.0/</span></span><br><span class="line"><span class="comment">// All Copyright reserved by Informatic Lab of Sun Yat-sen University</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k, tn, tcase = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> OFFLINE</span></span><br><span class="line">    freopen(<span class="string">"data.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="comment">//freopen("data.out", "w", stdout);</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>); </span><br><span class="line">    <span class="keyword">for</span> (;<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k, n || m || k;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> a, b;</span><br><span class="line">        <span class="built_in">vector</span>&lt;LL&gt; can(m, (<span class="number">1L</span>L &lt;&lt; n) - <span class="number">1</span>);</span><br><span class="line">        LL state = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (a[j] == <span class="string">'1'</span>)</span><br><span class="line">                    state ^= (<span class="number">1L</span>L &lt;&lt; j);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; ++j)</span><br><span class="line">                <span class="keyword">if</span> (b[j] == <span class="string">'1'</span>)</span><br><span class="line">                    can[j] &amp;= state;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    can[j] &amp;= ~state;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">ans</span><span class="params">(m, <span class="string">'?'</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (__builtin_popcountll(can[i]) &gt; <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            LL shift = __builtin_ctzll(can[i]);</span><br><span class="line">            <span class="keyword">if</span> (shift &gt; <span class="number">9</span>)</span><br><span class="line">                ans[i] = shift - <span class="number">10</span> + <span class="string">'A'</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans[i] = shift + <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="u5C0F_u7ED3"><a href="#u5C0F_u7ED3" class="headerlink" title="小结"></a>小结</h3></blockquote>
<p>在这题里， 对于 STL 里的容器使用如 <code>string ans(m, &#39;?&#39;);</code> 的方式初始化比较方便。<br>除了利用各种位运算符外， 还可以利用 GNU 内置的 <code>__builtin_popcountll()</code> 等位运算函数来方便地处理状态压缩的数据。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://soj.sysu.edu.cn/11347">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>共有 <em>N</em> 个开关和 <em>M</em> 盏灯， 每盏灯仅由一个开关控制， 而一个开关可能控制对应的多盏灯。 然后给出 <em>Q</em> 次操作， 每次包含开关和灯的状态。<br>左边的 0 表示保持开关现状不变， 1 表示改变开关状态；<br>右边的 0 表示该位置的灯处在关闭状态， 1 表示处在打开状态。<br>要求输出每盏灯是由第几个开关控制的， 若不能确定则以 ‘?’ 代替。</p>
<blockquote>
<h3 id="u6837_u4F8B_u8F93_u5165"><a href="#u6837_u4F8B_u8F93_u5165" class="headerlink" title="样例输入"></a>样例输入</h3></blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">10</span> <span class="number">3</span></span><br><span class="line"><span class="number">000</span> <span class="number">0000000000</span></span><br><span class="line"><span class="number">110</span> <span class="number">0000001111</span></span><br><span class="line"><span class="number">101</span> <span class="number">1111111100</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">01</span> <span class="number">1</span></span><br><span class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">10</span></span><br><span class="line"><span class="number">10000000000</span> <span class="number">10000000000</span></span><br><span class="line"><span class="number">11000000000</span> <span class="number">01000000000</span></span><br><span class="line"><span class="number">01100000000</span> <span class="number">00100000000</span></span><br><span class="line"><span class="number">00110000000</span> <span class="number">00010000000</span></span><br><span class="line"><span class="number">00011000000</span> <span class="number">00001000000</span></span><br><span class="line"><span class="number">00001100000</span> <span class="number">00000100000</span></span><br><span class="line"><span class="number">00000110000</span> <span class="number">00000010000</span></span><br><span class="line"><span class="number">00000011000</span> <span class="number">00000001000</span></span><br><span class="line"><span class="number">00000001100</span> <span class="number">00000000100</span></span><br><span class="line"><span class="number">00000000110</span> <span class="number">00000000010</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="u6837_u4F8B_u8F93_u51FA"><a href="#u6837_u4F8B_u8F93_u51FA" class="headerlink" title="样例输出"></a>样例输出</h3></blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2222221100</span></span><br><span class="line">??</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0123456789</span>A</span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>状态用一个<code>long long</code>型来保存。<br>对于每个 case 维护一个当前处于打开状态的开关集合。<br>对于每盏灯维护一个能与之匹配的开关集合， 初始化时将这个集合初始化成开关全集。<br>对于每次操作， 遍历每盏灯：<br>若当时这盏灯处于打开状态， 那么可以排除掉目前处于关闭状态的开关；<br>若当时这盏灯处于关闭状态，<br>则可以排除掉目前处于打开状态的开关。<br>处理完所有操作后， 遍历所有灯根据能与之匹配的开关集合处理答案即可。</p>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>]]>
    
    </summary>
    
      <category term="SOJ" scheme="http://dwayneten.com/tags/SOJ/"/>
    
      <category term="位运算" scheme="http://dwayneten.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
      <category term="状态压缩" scheme="http://dwayneten.com/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[五种 GCC 内置的位运算函数]]></title>
    <link href="http://dwayneten.com/2015/04/29/gccbuiltin/"/>
    <id>http://dwayneten.com/2015/04/29/gccbuiltin/</id>
    <published>2015-04-29T01:40:15.000Z</published>
    <updated>2015-12-13T19:56:34.556Z</updated>
    <content type="html"><![CDATA[<blockquote>
<h3 id="u539F_u578B"><a href="#u539F_u578B" class="headerlink" title="原型"></a>原型</h3></blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __builtin_ffs (<span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span><br></pre></td></tr></table></figure>
<p>返回 x 二进制表示中最后一位 1 是从后向前第几位， 比如 120 (01111000) 返回 4。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __builtin_clz (<span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span><br></pre></td></tr></table></figure></p>
<p>返回 x 二进制表示中前导 0 的个数， 比如 120 (01111000) 返回 25。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __builtin_ctz (<span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span><br></pre></td></tr></table></figure></p>
<p>返回 x 二进制表示中后导 0 的个数， 比如 120 (01111000) 返回 3。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __builtin_popcount (<span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span><br></pre></td></tr></table></figure></p>
<p>返回 x 二进制表示中 1 的个数， 比如 120 (01111000) 返回 4。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __builtin_parity (<span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span><br></pre></td></tr></table></figure></p>
<p>返回 x 的奇偶校验位 (x 二进制表示中 1 的个数模 2)， 比如 120 (01111000) 返回 0。</p>
<p>若需使用对应的 usigned long 和 usigned long long 版本， 则要在函数名后加 l 或者 ll.<br>如 __builtin_ffsll()</p>
<blockquote>
<h3 id="u6837_u4F8B"><a href="#u6837_u4F8B" class="headerlink" title="样例"></a>样例</h3></blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tmp = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"><span class="comment">// 00010000</span></span><br><span class="line">--tmp;</span><br><span class="line"><span class="comment">// 00001111</span></span><br><span class="line">tmp &lt;&lt;= <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 01111000</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, __builtin_ffs(tmp));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, __builtin_clz(tmp));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, __builtin_ctz(tmp));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, __builtin_popcount(tmp));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, __builtin_parity(tmp));</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<h3 id="u539F_u578B"><a href="#u539F_u578B" class="headerlink" title="原型"></a>原型</h3></blockquote>
<figure class="highlight c++]]>
    </summary>
    
      <category term="GCC" scheme="http://dwayneten.com/tags/GCC/"/>
    
      <category term="位运算" scheme="http://dwayneten.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
      <category term="软件开发" scheme="http://dwayneten.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSU 1542 Flipping Parentheses]]></title>
    <link href="http://dwayneten.com/2015/04/17/CSU1542/"/>
    <id>http://dwayneten.com/2015/04/17/CSU1542/</id>
    <published>2015-04-17T15:41:51.000Z</published>
    <updated>2015-12-13T20:06:08.064Z</updated>
    <content type="html"><![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://acm.csu.edu.cn/OnlineJudge/problem.php?id=1542" target="_blank" rel="external">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>给出长度为 <em>n</em> 且匹配正确的括号序列和 <em>m</em> 个操作。<br>每次操作将对应位置上的括号取反， 即<code>(</code>变为<code>)</code>， <code>)</code>变为<code>(</code>。<br>然后要求输出每次操作后对哪个位置上的括号取反可以使整个括号序列再次符合匹配。<br>若有多个满足要求的位置， 输出最靠左端的位置。</p>
<blockquote>
<h3 id="u6837_u4F8B_u8F93_u5165"><a href="#u6837_u4F8B_u8F93_u5165" class="headerlink" title="样例输入"></a>样例输入</h3></blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> <span class="number">3</span></span><br><span class="line">( ( ( ) ) )</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="u6837_u4F8B_u8F93_u51FA"><a href="#u6837_u4F8B_u8F93_u51FA" class="headerlink" title="样例输出"></a>样例输出</h3></blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>首先定义 a[i] 为 [1 - i] 里左括号减去右括号的值， 可以发现一个匹配正确的括号系列总是满足:</p>
<ul>
<li>a 数组中没有负数</li>
<li>a 数组以 0 结束</li>
</ul>
<a id="more"></a>
<p>用样例举例:</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>s</td>
<td>(</td>
<td>(</td>
<td>(</td>
<td>)</td>
<td>)</td>
<td>)</td>
</tr>
<tr>
<td>a[i]</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>2</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>第一个操作修改第 4 个括号后:</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>s</td>
<td>(</td>
<td>(</td>
<td>(</td>
<td><strong>(</strong></td>
<td>)</td>
<td>)</td>
</tr>
<tr>
<td>a[i]</td>
<td><strong><em>1</em></strong></td>
<td>2</td>
<td>3</td>
<td>2</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>可以看出， 若第 x 个括号是<code>)</code>, 将其修改成<code>(</code>后， [a[x], a[n]] 都加上了 2.<br>要使其恢复匹配即是要找一个最靠左端的 y ， y 满足 [a[y], a[n]] &gt;= 2.<br>所以要从尾端往前找， 找到第一个不满足 a[i] &gt;= 2 的即跳出， 所求的 y 就是 i + 1.<br>在这个例子， 第一个不满足的是 a[1] = 1， 所求的 y 是 1 + 1 = 2.</p>
<p>所以将第 2 个括号取反:</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>s</td>
<td>(</td>
<td><strong>)</strong></td>
<td>(</td>
<td>(</td>
<td>)</td>
<td>)</td>
</tr>
<tr>
<td>a[i]</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>整个括号序列又符合匹配了。</p>
<p>第二个操作修改第 3 个括号后:</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>s</td>
<td>(</td>
<td>)</td>
<td><strong>)</strong></td>
<td>(</td>
<td>)</td>
<td>)</td>
</tr>
<tr>
<td>a[i]</td>
<td>1</td>
<td>0</td>
<td>-1</td>
<td>0</td>
<td>-1</td>
<td>-2</td>
</tr>
<tr>
<td>d[i]</td>
<td>1</td>
<td><strong><em>-2</em></strong></td>
<td>-4</td>
<td>-4</td>
<td>-6</td>
<td>-8</td>
</tr>
</tbody>
</table>
<p>相应地可以看出， 若第 x 个括号是<code>(</code>， 将其修改成<code>)</code>后， a[a[x], a[n]] 都减去了 2.<br>对于这种情况显然地，找到最左端的<code>)</code>并将其修改成<code>(</code>就可以使括号序列重新满足匹配。<br>为此引入一个 d 数组， d[i] = a[i] - i, 那么我们要找的就是 $$min(\ i\ |\ d[i] &lt; 0 )$$</p>
<p>所以将第 2 个括号取反:</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>s</td>
<td>(</td>
<td><strong>(</strong></td>
<td>)</td>
<td>(</td>
<td>)</td>
<td>)</td>
</tr>
<tr>
<td>a[i]</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>d[i]</td>
<td>1</td>
<td>0</td>
<td>-2</td>
<td>-2</td>
<td>-4</td>
<td>-6</td>
</tr>
</tbody>
</table>
<p>至此， 两种修改都有了对应的求解策略， 需要更新维护的是区间 a[i] 的最小值用来找出不满足 a[i] &gt;= 2 的位置和区间 d[i] 的最小值用来找出最靠左端的<code>)</code>。<br>还有修改括号后的 a 数组和 d 数组的区间修改。<br>这种操作当然用线段树实现啦。</p>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mydebugn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tn, n, m, tcase = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300024</span>;</span><br><span class="line"><span class="keyword">char</span> paren[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> num[maxn &lt;&lt; <span class="number">2</span>], lazy[maxn &lt;&lt; <span class="number">2</span>], d[maxn &lt;&lt; <span class="number">2</span>], q, cur, ans;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lson l, mid, rt &lt;&lt; <span class="number">1</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> rson mid + <span class="number">1</span>, r, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt; <span class="function">T <span class="title">min</span><span class="params">(T a, T b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    num[rt] = min(num[rt &lt;&lt; <span class="number">1</span>], num[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    d[rt] = min(d[rt &lt;&lt; <span class="number">1</span>], d[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    lazy[rt &lt;&lt; <span class="number">1</span>] += lazy[rt];</span><br><span class="line">    lazy[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += lazy[rt];</span><br><span class="line">    d[rt &lt;&lt; <span class="number">1</span>] += lazy[rt];</span><br><span class="line">    d[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += lazy[rt];</span><br><span class="line">    num[rt &lt;&lt; <span class="number">1</span>] += lazy[rt];</span><br><span class="line">    num[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += lazy[rt];</span><br><span class="line"></span><br><span class="line">    lazy[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        cur += paren[l] == <span class="string">'('</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        num[rt] = cur;</span><br><span class="line">        d[rt] = num[rt] - l;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> mydebug</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, num[rt]);</span><br><span class="line">        <span class="keyword">if</span> (r == n)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; R &gt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        lazy[rt] += x;</span><br><span class="line">        d[rt] += x;</span><br><span class="line">        num[rt] += x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lazy[rt])</span><br><span class="line">        pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= mid)</span><br><span class="line">        update(L, R, x, lson);</span><br><span class="line">    update(L, R, x, rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">if</span> (lazy[rt])</span><br><span class="line">        pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (d[rt &lt;&lt; <span class="number">1</span>] &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> query1(lson);</span><br><span class="line">    <span class="keyword">return</span> query1(rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> l+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (lazy[rt])</span><br><span class="line">        pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (num[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> query2(rson);</span><br><span class="line">    <span class="keyword">return</span> query2(lson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showd</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, d[rt]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lazy[rt])</span><br><span class="line">        pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    showd(lson);</span><br><span class="line">    showd(rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shownum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, num[rt]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lazy[rt])</span><br><span class="line">        pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    shownum(lson);</span><br><span class="line">    shownum(rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> in)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    paren[in] = paren[in] == <span class="string">'('</span> ? <span class="string">')'</span> : <span class="string">'('</span>;</span><br><span class="line">    update(in, n, paren[in] == <span class="string">')'</span> ? -<span class="number">2</span> : <span class="number">2</span>, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> mydebug</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="built_in">puts</span>(paren+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"num:"</span>);</span><br><span class="line">    shownum(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"\nd:"</span>);</span><br><span class="line">    showd(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> OFFLINE</span></span><br><span class="line">    freopen(<span class="string">"data.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %s"</span>, &amp;n, &amp;m, paren+<span class="number">1</span>);</span><br><span class="line">    build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        change(q);</span><br><span class="line">        <span class="keyword">if</span> (paren[q] == <span class="string">')'</span>)</span><br><span class="line">            ans = query1(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans = query2(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">        change(ans);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://acm.csu.edu.cn/OnlineJudge/problem.php?id=1542">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>给出长度为 <em>n</em> 且匹配正确的括号序列和 <em>m</em> 个操作。<br>每次操作将对应位置上的括号取反， 即<code>(</code>变为<code>)</code>， <code>)</code>变为<code>(</code>。<br>然后要求输出每次操作后对哪个位置上的括号取反可以使整个括号序列再次符合匹配。<br>若有多个满足要求的位置， 输出最靠左端的位置。</p>
<blockquote>
<h3 id="u6837_u4F8B_u8F93_u5165"><a href="#u6837_u4F8B_u8F93_u5165" class="headerlink" title="样例输入"></a>样例输入</h3></blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> <span class="number">3</span></span><br><span class="line">( ( ( ) ) )</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="u6837_u4F8B_u8F93_u51FA"><a href="#u6837_u4F8B_u8F93_u51FA" class="headerlink" title="样例输出"></a>样例输出</h3></blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>首先定义 a[i] 为 [1 - i] 里左括号减去右括号的值， 可以发现一个匹配正确的括号系列总是满足:</p>
<ul>
<li>a 数组中没有负数</li>
<li>a 数组以 0 结束</li>
</ul>]]>
    
    </summary>
    
      <category term="CSU" scheme="http://dwayneten.com/tags/CSU/"/>
    
      <category term="构造" scheme="http://dwayneten.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="线段树" scheme="http://dwayneten.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSU 1554 SG Value]]></title>
    <link href="http://dwayneten.com/2015/04/17/CSU1554/"/>
    <id>http://dwayneten.com/2015/04/17/CSU1554/</id>
    <published>2015-04-17T10:09:13.000Z</published>
    <updated>2015-12-13T19:32:56.427Z</updated>
    <content type="html"><![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://acm.csu.edu.cn/OnlineJudge/problem.php?id=1554" target="_blank" rel="external">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>共有 <em>n</em> 个操作， 一开始集合为空集， <code>1 x</code>代表将一个 x 加入到集合中， <code>2</code>则表示查询当前集合的 SG 值， SG 值为利用当前集合内任意多个元素相加所不能得出的数中最小的正整数。</p>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>可以确认的是， 一开始当集合为空集时，SG 值为 1.<br>注意到当 SG 值为 y 时， 理所当然地利用集合内的元素必然可以组合出 [1, y) 的数。<br>然后考虑每加入一个新的元素 x 时， 对 SG 值有什么影响:</p>
<ul>
<li>对于 <code>x &lt;= SG 值</code> 的情况<br>因为之前可以组合出 [1, SG 值) 的数， 加入 x 后就可以组合出 [1， SG 值 + y) 的数， 同时原 SG 值更新为 SG 值 + y。</li>
<li>对于 <code>x &gt; SG 值</code> 的情况<br>因为 x &gt; SG 值， 所以加入 x 对目前的 SG 值没有影响， 但如果以后 SG 值变得比 x 大的话， 就会对其产生影响， 所以先将 x 存起来， 每一次 SG 值得到更新后， 提取出之前存过的数， 看其是否能更新 SG 值。</li>
</ul>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>
<a id="more"></a>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*///////////////////////////////////////////////////////</span><br><span class="line">    Author        :Dwayne</span><br><span class="line">    Created Time  :2015/4/17 8:20:06</span><br><span class="line">    File Name     :CSU1554.cpp</span><br><span class="line">//////////////////////////////////////////////////////<span class="comment">/*/</span><br><span class="line"></span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int n, m, k, tn, tcase = 0;</span><br><span class="line">typedef long long LL;</span><br><span class="line">LL ans;</span><br><span class="line">multiset&lt;LL&gt;s;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    while(~scanf("%d", &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        s.clear();</span><br><span class="line">        ans = 1;</span><br><span class="line">        LL t;</span><br><span class="line">        for (int i=0; i&lt;n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf("%lld", &amp;t);</span><br><span class="line">            if (t == 1)</span><br><span class="line">            &#123;</span><br><span class="line">                scanf("%lld", &amp;t);</span><br><span class="line">                if (t &lt;= ans)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans += t;</span><br><span class="line">                    if (s.size())</span><br><span class="line">                    &#123;</span><br><span class="line">                        multiset&lt;LL&gt;::iterator it = s.begin();</span><br><span class="line">                        while(*it &lt;= ans &amp;&amp; s.size())</span><br><span class="line">                        &#123;</span><br><span class="line">                            ans += *it;</span><br><span class="line">                            s.erase(it);</span><br><span class="line">                            it = s.begin();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                    s.insert(t);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">                printf("%lld\n", ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://acm.csu.edu.cn/OnlineJudge/problem.php?id=1554">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>共有 <em>n</em> 个操作， 一开始集合为空集， <code>1 x</code>代表将一个 x 加入到集合中， <code>2</code>则表示查询当前集合的 SG 值， SG 值为利用当前集合内任意多个元素相加所不能得出的数中最小的正整数。</p>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>可以确认的是， 一开始当集合为空集时，SG 值为 1.<br>注意到当 SG 值为 y 时， 理所当然地利用集合内的元素必然可以组合出 [1, y) 的数。<br>然后考虑每加入一个新的元素 x 时， 对 SG 值有什么影响:</p>
<ul>
<li>对于 <code>x &lt;= SG 值</code> 的情况<br>因为之前可以组合出 [1, SG 值) 的数， 加入 x 后就可以组合出 [1， SG 值 + y) 的数， 同时原 SG 值更新为 SG 值 + y。</li>
<li>对于 <code>x &gt; SG 值</code> 的情况<br>因为 x &gt; SG 值， 所以加入 x 对目前的 SG 值没有影响， 但如果以后 SG 值变得比 x 大的话， 就会对其产生影响， 所以先将 x 存起来， 每一次 SG 值得到更新后， 提取出之前存过的数， 看其是否能更新 SG 值。</li>
</ul>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>]]>
    
    </summary>
    
      <category term="CSU" scheme="http://dwayneten.com/tags/CSU/"/>
    
      <category term="构造" scheme="http://dwayneten.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSU 1555 Inversion Sequence]]></title>
    <link href="http://dwayneten.com/2015/04/15/CSU1555/"/>
    <id>http://dwayneten.com/2015/04/15/CSU1555/</id>
    <published>2015-04-15T04:42:56.000Z</published>
    <updated>2015-12-13T19:33:03.022Z</updated>
    <content type="html"><![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://acm.csu.edu.cn/OnlineJudge/problem.php?id=1555" target="_blank" rel="external">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>原序列由 1 ~ <em>n</em> 组成<br>给出根据原序列得出的包含 <em>n</em> 个数字的序列， 第 <em>i</em> 个数字代表原序列中的 <em>i</em> 前有多少个比 <em>i</em> 大的数， 求原序列。<br>若无合法的原序列， 输出 No solution 。</p>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>不难想到采取预留空位的策略。<br>以下面的数据为例：</p>
<blockquote>
<p>输入<br>5<br>1 2 0 1 0<br>输出<br>3 1 5 2 4</p>
</blockquote>
<ol>
<li>既然 1 前面有 1 个比 1 大的数， 那么就把 1 安置在第 2 位， 前面留一个空位。</li>
<li>因为 2 的前面有 2 个比 2 大的数， 那么就在其前面预留 2 个空位， 又因为第二位已经被 1 占用了， 所以把第 1 、 3 位留作空位， 把 2 安置在第 4 位。</li>
<li>因为 3 的前面有 0 个比 3 大的数， 所以不必预留空位， 将其直接放在第一个空闲的位置上， 即第 1 位。</li>
<li>因为给 4 预留 1 个空位， 经过上面三个操作后， 第 1、 2 、 4 位都被占用了， 所以将第 3 位作为预留空位， 将 4 放在第 5 位。</li>
<li>与 3 类似， 将 5 放在第一个可用位置上， 即第 3 位。</li>
</ol>
<p>策略有了， 但是上面的每步操作如果直接暴力的话是 O(n) 的时间复杂度， 需要优化成 O(logn) 才行， 可以用线段树实现。</p>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>
<a id="more"></a>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, tn,  tcase = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[<span class="number">65540</span>];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">65540</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;d[i], &amp;sum[i]);</span><br><span class="line">        <span class="keyword">if</span> (d[i] == <span class="number">1</span>)</span><br><span class="line">            q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> from = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="comment">// 每棵树最后一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (!d[from])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> to = sum[from];</span><br><span class="line">        ans.push(make_pair(from, to));</span><br><span class="line">        sum[to] ^= from;</span><br><span class="line">        d[to]--;</span><br><span class="line">        <span class="keyword">if</span> (d[to] == <span class="number">1</span>)</span><br><span class="line">            q.push(to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</span><br><span class="line">    <span class="keyword">while</span>(!ans.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans.front().first, ans.front().second);</span><br><span class="line">        ans.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://acm.csu.edu.cn/OnlineJudge/problem.php?id=1555">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>原序列由 1 ~ <em>n</em> 组成<br>给出根据原序列得出的包含 <em>n</em> 个数字的序列， 第 <em>i</em> 个数字代表原序列中的 <em>i</em> 前有多少个比 <em>i</em> 大的数， 求原序列。<br>若无合法的原序列， 输出 No solution 。</p>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>不难想到采取预留空位的策略。<br>以下面的数据为例：</p>
<blockquote>
<p>输入<br>5<br>1 2 0 1 0<br>输出<br>3 1 5 2 4</p>
</blockquote>
<ol>
<li>既然 1 前面有 1 个比 1 大的数， 那么就把 1 安置在第 2 位， 前面留一个空位。</li>
<li>因为 2 的前面有 2 个比 2 大的数， 那么就在其前面预留 2 个空位， 又因为第二位已经被 1 占用了， 所以把第 1 、 3 位留作空位， 把 2 安置在第 4 位。</li>
<li>因为 3 的前面有 0 个比 3 大的数， 所以不必预留空位， 将其直接放在第一个空闲的位置上， 即第 1 位。</li>
<li>因为给 4 预留 1 个空位， 经过上面三个操作后， 第 1、 2 、 4 位都被占用了， 所以将第 3 位作为预留空位， 将 4 放在第 5 位。</li>
<li>与 3 类似， 将 5 放在第一个可用位置上， 即第 3 位。</li>
</ol>
<p>策略有了， 但是上面的每步操作如果直接暴力的话是 O(n) 的时间复杂度， 需要优化成 O(logn) 才行， 可以用线段树实现。</p>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>]]>
    
    </summary>
    
      <category term="CSU" scheme="http://dwayneten.com/tags/CSU/"/>
    
      <category term="线段树" scheme="http://dwayneten.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSU 1541 There is No Alternative]]></title>
    <link href="http://dwayneten.com/2015/04/15/CSU1541/"/>
    <id>http://dwayneten.com/2015/04/15/CSU1541/</id>
    <published>2015-04-15T04:41:05.000Z</published>
    <updated>2015-12-13T19:32:59.573Z</updated>
    <content type="html"><![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://acm.csu.edu.cn/OnlineJudge/problem.php?id=1541" target="_blank" rel="external">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>求最小生成树不可替代的边的数目和这些不可替代的边的花费总和。</p>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>原先是想 DFS 找环， 加一些判断去掉某些边， 发现实现不了亦有可能是错误的。<br>其实只需先把最小生成树的总权值求出来， 然后对于每一条在最小生成树上的边， 求在去掉这条边的情况下， 原图再找最小生成树的总权值， 比较一下两个值， 若相等， 则这条边必然可以被其他边所替代， 反之若不等， 那么这条边就是我们要求的不可替代的边之一。</p>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>
<a id="more"></a>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, tn, tcase = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">512</span>], skip[<span class="number">50024</span>], ans[<span class="number">50024</span>];</span><br><span class="line"><span class="keyword">int</span> small, first, num, sum, cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> edge</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> from, to, c;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge a) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;c &lt; a.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[<span class="number">50024</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == p[x] ? x : p[x] = find(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kruskal</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line">        p[i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (skip[i])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        x = find(e[i].from), y = find(e[i].to);</span><br><span class="line">        <span class="keyword">if</span> (x != y)</span><br><span class="line">        &#123;</span><br><span class="line">            p[x] = y;</span><br><span class="line">            ret += e[i].c;</span><br><span class="line">            <span class="keyword">if</span> (first)</span><br><span class="line">                ans[num++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> OFFLINE</span></span><br><span class="line">    freopen(<span class="string">"data.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="comment">//freopen("data.out", "w", stdout);</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;e[i].from, &amp;e[i].to, &amp;e[i].c);</span><br><span class="line"></span><br><span class="line">    sort(e, e+m);</span><br><span class="line">    first = <span class="number">1</span>;</span><br><span class="line">    small = Kruskal();</span><br><span class="line">    first = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        skip[ans[i]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (small != Kruskal())</span><br><span class="line">            cnt++, sum += e[ans[i]].c;</span><br><span class="line">        skip[ans[i]] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, cnt, sum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://acm.csu.edu.cn/OnlineJudge/problem.php?id=1541">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>求最小生成树不可替代的边的数目和这些不可替代的边的花费总和。</p>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>原先是想 DFS 找环， 加一些判断去掉某些边， 发现实现不了亦有可能是错误的。<br>其实只需先把最小生成树的总权值求出来， 然后对于每一条在最小生成树上的边， 求在去掉这条边的情况下， 原图再找最小生成树的总权值， 比较一下两个值， 若相等， 则这条边必然可以被其他边所替代， 反之若不等， 那么这条边就是我们要求的不可替代的边之一。</p>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>]]>
    
    </summary>
    
      <category term="CSU" scheme="http://dwayneten.com/tags/CSU/"/>
    
      <category term="最小生成树" scheme="http://dwayneten.com/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hihocoder 1074 字体设计]]></title>
    <link href="http://dwayneten.com/2015/03/30/hiho1074/"/>
    <id>http://dwayneten.com/2015/03/30/hiho1074/</id>
    <published>2015-03-30T15:41:15.000Z</published>
    <updated>2015-12-13T19:33:13.404Z</updated>
    <content type="html"><![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://hihocoder.com/problemset/problem/1074" target="_blank" rel="external">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>给出 <em>n</em> 个数 <em>a<sub>1</sub></em> ~ <em>a<sub>n</sub></em> ， 若存在某一连续的数列 <em>a<sub>i</sub></em> ~ <em>a<sub>j</sub></em> ( i &lt; j ) :</p>
<ul>
<li>对于任何 <em>k</em> ∈  ( <em>i</em> , <em>j</em> ) 都满足 <em>a<sub>i</sub></em> &lt; <em>a<sub>k</sub></em> &lt; <em>a<sub>j</sub></em><br> 或</li>
<li>对于任何 <em>k</em> ∈  ( <em>i</em> , <em>j</em> ) 都满足 <em>a<sub>i</sub></em> &gt; <em>a<sub>k</sub></em> &gt; <em>a<sub>j</sub></em> </li>
</ul>
<p>则可以只保留 <em>a<sub>i</sub></em> 和 <em>a<sub>j</sub></em> ， 去掉 <em>a<sub>i</sub></em> 和 <em>a<sub>j</sub></em> 之间其它数。<br>求最少保留多少数和保留的数在原数列的下标(从 1 开始)。</p>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>在贪心策略下， 去掉区间 [ i, j ) 中最大数和最小数之间的数是必然最优的选择。<br>因此保留区间 [ i, j ) 中的 <em>a<sub>max</sub></em> 和 <em>a<sub>min</sub></em> ， 且可以把区间 [ i, j ) 分割成 [ i, <em>a<sub>max</sub></em> ) + [ <em>a<sub>max</sub></em> , j ) 或者 [ i, <em>a<sub>min</sub></em> ) + [ <em>a<sub>min</sub></em> , j ).<br>对分割后的区间也可以继续执行贪心策略。<br>注意到原数列首尾元素必须保留， 分割后的区间首尾元素必有其一被保留。<br>求解大区间和小区间的操作一致， 可以写成递归的形式。</p>
<blockquote>
<h3 id="u9898_u5916_u8BDD"><a href="#u9898_u5916_u8BDD" class="headerlink" title="题外话"></a>题外话</h3></blockquote>
<p><code>min_element</code> 和 <code>max_element</code> 的 <code>Comp</code> 函数调用方式有有别于 <code>sort</code> 的 <code>Comp</code> 函数调用方式的地方。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// min_element</span></span><br><span class="line"><span class="keyword">if</span> (comp(*first,*smallest))</span><br><span class="line">      smallest=first;</span><br><span class="line">      </span><br><span class="line"><span class="comment">// max_element</span></span><br><span class="line"><span class="keyword">if</span> (comp(*largest,*first))</span><br><span class="line">      largest=first;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>
<a id="more"></a>
<figure class="highlight c++"><figcaption><span>hihocoder 1074 字体设计</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*///////////////////////////////////////////////////////</span><br><span class="line">    Author        :Dwayne</span><br><span class="line">    Created Time  :2015/3/30 18:10:26</span><br><span class="line">    File Name     :c.cpp</span><br><span class="line">//////////////////////////////////////////////////////<span class="comment">/*/</span><br><span class="line"></span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int n, m, k, tn, tcase = 0;</span><br><span class="line"></span><br><span class="line">int a[100024], ans[100024], cnt;</span><br><span class="line">int maxin, minin;</span><br><span class="line"></span><br><span class="line">bool cmp_max(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    // 题目说 ai 互不相同， 但是这里少个等号就会WA， 原因不明</span><br><span class="line">	return x &lt;= y;</span><br><span class="line">&#125;</span><br><span class="line">bool cmp_min(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">	return x &lt; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void run(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">	if (!ans[l])</span><br><span class="line">		ans[l] = 1, cnt++;</span><br><span class="line">	if (!ans[r])</span><br><span class="line">		ans[r] = 1, cnt++;</span><br><span class="line"></span><br><span class="line">	maxin = distance(a, max_element(a+l, a+r+1, cmp_max));</span><br><span class="line">	minin = distance(a, min_element(a+l, a+r+1, cmp_min));</span><br><span class="line">	</span><br><span class="line">	if (maxin != l &amp;&amp; maxin != r)</span><br><span class="line">	&#123;</span><br><span class="line">		run(l, maxin);</span><br><span class="line">		run(maxin, r);</span><br><span class="line">		return ;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if (minin != l &amp;&amp; minin != r)</span><br><span class="line">	&#123;</span><br><span class="line">		run(l, minin);</span><br><span class="line">		run(minin, r);</span><br><span class="line">		return ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	while (scanf("%d", &amp;n) != EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		for (int i=0; i&lt;n; ++i)</span><br><span class="line">			scanf("%d", &amp;a[i]), ans[i] = 0;</span><br><span class="line"></span><br><span class="line">		cnt = 0;</span><br><span class="line">		run(0, n-1);</span><br><span class="line"></span><br><span class="line">		printf("%d\n", cnt);</span><br><span class="line">		for (int i=0; i&lt;n; ++i)</span><br><span class="line">			if (ans[i])</span><br><span class="line">				printf(i == n-1 ? "%d\n" : "%d ", i+1);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://hihocoder.com/problemset/problem/1074">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>给出 <em>n</em> 个数 <em>a<sub>1</sub></em> ~ <em>a<sub>n</sub></em> ， 若存在某一连续的数列 <em>a<sub>i</sub></em> ~ <em>a<sub>j</sub></em> ( i &lt; j ) :</p>
<ul>
<li>对于任何 <em>k</em> ∈  ( <em>i</em> , <em>j</em> ) 都满足 <em>a<sub>i</sub></em> &lt; <em>a<sub>k</sub></em> &lt; <em>a<sub>j</sub></em><br> 或</li>
<li>对于任何 <em>k</em> ∈  ( <em>i</em> , <em>j</em> ) 都满足 <em>a<sub>i</sub></em> &gt; <em>a<sub>k</sub></em> &gt; <em>a<sub>j</sub></em> </li>
</ul>
<p>则可以只保留 <em>a<sub>i</sub></em> 和 <em>a<sub>j</sub></em> ， 去掉 <em>a<sub>i</sub></em> 和 <em>a<sub>j</sub></em> 之间其它数。<br>求最少保留多少数和保留的数在原数列的下标(从 1 开始)。</p>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>在贪心策略下， 去掉区间 [ i, j ) 中最大数和最小数之间的数是必然最优的选择。<br>因此保留区间 [ i, j ) 中的 <em>a<sub>max</sub></em> 和 <em>a<sub>min</sub></em> ， 且可以把区间 [ i, j ) 分割成 [ i, <em>a<sub>max</sub></em> ) + [ <em>a<sub>max</sub></em> , j ) 或者 [ i, <em>a<sub>min</sub></em> ) + [ <em>a<sub>min</sub></em> , j ).<br>对分割后的区间也可以继续执行贪心策略。<br>注意到原数列首尾元素必须保留， 分割后的区间首尾元素必有其一被保留。<br>求解大区间和小区间的操作一致， 可以写成递归的形式。</p>
<blockquote>
<h3 id="u9898_u5916_u8BDD"><a href="#u9898_u5916_u8BDD" class="headerlink" title="题外话"></a>题外话</h3></blockquote>
<p><code>min_element</code> 和 <code>max_element</code> 的 <code>Comp</code> 函数调用方式有有别于 <code>sort</code> 的 <code>Comp</code> 函数调用方式的地方。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// min_element</span></span><br><span class="line"><span class="keyword">if</span> (comp(*first,*smallest))</span><br><span class="line">      smallest=first;</span><br><span class="line">      </span><br><span class="line"><span class="comment">// max_element</span></span><br><span class="line"><span class="keyword">if</span> (comp(*largest,*first))</span><br><span class="line">      largest=first;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>]]>
    
    </summary>
    
      <category term="hihocoder" scheme="http://dwayneten.com/tags/hihocoder/"/>
    
      <category term="贪心" scheme="http://dwayneten.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="递归" scheme="http://dwayneten.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CF 501C Misha and Forest]]></title>
    <link href="http://dwayneten.com/2015/03/30/CF501C/"/>
    <id>http://dwayneten.com/2015/03/30/CF501C/</id>
    <published>2015-03-30T15:26:31.000Z</published>
    <updated>2015-12-13T19:33:20.290Z</updated>
    <content type="html"><![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://codeforces.com/contest/501/problem/C" target="_blank" rel="external">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>给出节点的数目 <em>n</em> ， 接下来有 <em>n</em> 行， 第 <em>i</em> 行 代表第 <em>i</em> 个节点。<br>每行包括一个 <em>d<sub>i</sub></em> 和 <em>s<sub>i</sub></em> ， <em>d<sub>i</sub></em> 表示该节点与多少个节点相邻， <em>s<sub>i</sub></em> 代表所有与其相邻的节点编号相异或的值 。保证这些点组成森林。<br>要求的是这个森林里面有多少条边， 和每条边的 <em>u</em> 和 <em>v</em>， 以任意顺序输出。</p>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>一开始想的是建图， 根据异或的值来判断哪个节点和哪个节点之间有边， 但发现从这个角度无从下手去判断。<br>继而尝试从异或这个点下手。<br>我们知道异或有几个比较有用的性质：</p>
<ul>
<li>x ^ 0 = 0</li>
<li>x ^ x = 0 (偶数个相同的数相异或都等于零)</li>
<li>a ^ b = b ^ c<br>继而有</li>
<li>a ^ b = (a ^ b ^ c) ^ c</li>
</ul>
<p>然后注意到 <em>s<sub>i</sub></em> 其实“储存”了所有与第 <em>i</em> 个节点相邻的节点的编号。<br>但是怎么把它们提取出来呢？<br>回想题目， 既然给出的数据组成的是森林， 那么就一定有叶子节点。 叶子节点相比其他节点的特点就是只有一个节点与其相邻， 也就是 <em>d<sub>i</sub></em> = 1 。<br>显然， 既然相邻的节点只有一个， 我们马上就可以求出其相邻节点的编号 —— 就是 <em>s<sub>i</sub></em> 。<br>现在我们已经可以求出所有叶子节点和它父亲节点的编号， 但是这还不够， 题目要求的是整个森林的所有边。<br>我们要下一步操作是把森林中的所有的叶子和对应的边去掉来得到一个新的森林， 并且这个森林也一定存在着叶子。<br>为了实现这个操作， 利用到了上面提及的异或的性质。 我们在找到叶子节点 <em>i</em> 的父亲节点 <em>j</em> 之后， 使 <em>d<sub>j</sub></em> -= 1 并且 <em>s<sub>j</sub></em> ^= i 来将叶子节点 <em>i</em> 从森林中除去。当然， 在期间要记录一下它们之间的边作为答案。<br>可以用一个队列来存目前森林的叶子节点集合， 不断更新森林直到该队列为空时也就把所有边求出来了。</p>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>
<a id="more"></a>
<figure class="highlight c++"><figcaption><span>CF 501C Misha and Forest</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, tn,  tcase = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[<span class="number">65540</span>];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">65540</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;d[i], &amp;sum[i]);</span><br><span class="line">        <span class="keyword">if</span> (d[i] == <span class="number">1</span>)</span><br><span class="line">            q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> from = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="comment">// 每棵树最后一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (!d[from])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> to = sum[from];</span><br><span class="line">        ans.push(make_pair(from, to));</span><br><span class="line">        sum[to] ^= from;</span><br><span class="line">        d[to]--;</span><br><span class="line">        <span class="keyword">if</span> (d[to] == <span class="number">1</span>)</span><br><span class="line">            q.push(to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</span><br><span class="line">    <span class="keyword">while</span>(!ans.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans.front().first, ans.front().second);</span><br><span class="line">        ans.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9898_u76EE_u94FE_u63A5"><a href="#u9898_u76EE_u94FE_u63A5" class="headerlink" title="题目链接"></a><a href="http://codeforces.com/contest/501/problem/C">题目链接</a></h2><blockquote>
<h3 id="u9898_u610F"><a href="#u9898_u610F" class="headerlink" title="题意"></a>题意</h3></blockquote>
<p>给出节点的数目 <em>n</em> ， 接下来有 <em>n</em> 行， 第 <em>i</em> 行 代表第 <em>i</em> 个节点。<br>每行包括一个 <em>d<sub>i</sub></em> 和 <em>s<sub>i</sub></em> ， <em>d<sub>i</sub></em> 表示该节点与多少个节点相邻， <em>s<sub>i</sub></em> 代表所有与其相邻的节点编号相异或的值 。保证这些点组成森林。<br>要求的是这个森林里面有多少条边， 和每条边的 <em>u</em> 和 <em>v</em>， 以任意顺序输出。</p>
<blockquote>
<h3 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h3></blockquote>
<p>一开始想的是建图， 根据异或的值来判断哪个节点和哪个节点之间有边， 但发现从这个角度无从下手去判断。<br>继而尝试从异或这个点下手。<br>我们知道异或有几个比较有用的性质：</p>
<ul>
<li>x ^ 0 = 0</li>
<li>x ^ x = 0 (偶数个相同的数相异或都等于零)</li>
<li>a ^ b = b ^ c<br>继而有</li>
<li>a ^ b = (a ^ b ^ c) ^ c</li>
</ul>
<p>然后注意到 <em>s<sub>i</sub></em> 其实“储存”了所有与第 <em>i</em> 个节点相邻的节点的编号。<br>但是怎么把它们提取出来呢？<br>回想题目， 既然给出的数据组成的是森林， 那么就一定有叶子节点。 叶子节点相比其他节点的特点就是只有一个节点与其相邻， 也就是 <em>d<sub>i</sub></em> = 1 。<br>显然， 既然相邻的节点只有一个， 我们马上就可以求出其相邻节点的编号 —— 就是 <em>s<sub>i</sub></em> 。<br>现在我们已经可以求出所有叶子节点和它父亲节点的编号， 但是这还不够， 题目要求的是整个森林的所有边。<br>我们要下一步操作是把森林中的所有的叶子和对应的边去掉来得到一个新的森林， 并且这个森林也一定存在着叶子。<br>为了实现这个操作， 利用到了上面提及的异或的性质。 我们在找到叶子节点 <em>i</em> 的父亲节点 <em>j</em> 之后， 使 <em>d<sub>j</sub></em> -= 1 并且 <em>s<sub>j</sub></em> ^= i 来将叶子节点 <em>i</em> 从森林中除去。当然， 在期间要记录一下它们之间的边作为答案。<br>可以用一个队列来存目前森林的叶子节点集合， 不断更新森林直到该队列为空时也就把所有边求出来了。</p>
<blockquote>
<h3 id="u4EE3_u7801_u5B9E_u73B0"><a href="#u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="代码实现"></a>代码实现</h3></blockquote>]]>
    
    </summary>
    
      <category term="Codeforces" scheme="http://dwayneten.com/tags/Codeforces/"/>
    
      <category term="图论" scheme="http://dwayneten.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="异或" scheme="http://dwayneten.com/tags/%E5%BC%82%E6%88%96/"/>
    
      <category term="构造" scheme="http://dwayneten.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[查询在各大 OJ 的 AC 数]]></title>
    <link href="http://dwayneten.com/2015/03/13/zscacm/"/>
    <id>http://dwayneten.com/2015/03/13/zscacm/</id>
    <published>2015-03-13T15:21:43.000Z</published>
    <updated>2015-12-13T19:32:44.163Z</updated>
    <content type="html"><![CDATA[<blockquote>
<h3 id="u4F20_u9001_u95E8"><a href="#u4F20_u9001_u95E8" class="headerlink" title="传送门"></a>传送门</h3></blockquote>
<p><a href="http://zscacm.sinaapp.com" target="_blank" rel="external">一个查询在各大 OJ 上 AC 数的页面</a></p>
<h2 id="u529F_u80FD"><a href="#u529F_u80FD" class="headerlink" title="功能"></a>功能</h2><p>支持 <a href="http://poj.org" target="_blank" rel="external">POJ</a>, <a href="http://acm.hdu.edu.cn" target="_blank" rel="external">HDU</a>, <a href="http://210.38.224.114" target="_blank" rel="external">ZSCOJ</a> (我校 OJ )的 AC 数查询和 <a href="http://bestcoder.hdu.edu.cn/" target="_blank" rel="external">Codeforces</a>, <a href="http://bestcoder.hdu.edu.cn/" target="_blank" rel="external">Bestcoder</a> 的 Rating 查询。<br>其他 OJ 暂不支持，主要是因为个人使用不怎么用到 XD</p>
<h2 id="u8D77_u56E0"><a href="#u8D77_u56E0" class="headerlink" title="起因"></a>起因</h2><p>某天老师给我发了这个 <a href="http://neuacm.sinaapp.com/index.php" target="_blank" rel="external">neuacm 刷题榜</a>，<br>在上面那个网页查询似乎要增加到表格中去，感觉可以自己搞个来方便查询。<br><a id="more"></a></p>
<h2 id="u5B9E_u73B0"><a href="#u5B9E_u73B0" class="headerlink" title="实现"></a>实现</h2><p>想了下实现方法，应该可以直接到各 OJ 的用户资料页去抓取 AC 数，想起之前看过 <a href="https://github.com/EndlessCheng" target="_blank" rel="external">EndlessCheng</a> 的 <a href="https://github.com/EndlessCheng/AC-Manager" target="_blank" rel="external">AC-Manager</a>，实现起来应该比较简单。</p>
<p>于是开始做，在 SAE 新建了个应用，开发语言选的<code>Python</code>（其实只是没试过玩一下）。<br>前端框架直接套的<code>purecss</code>，只划了两个页面，放了几个输入框用于接收账户名。</p>
<p>把 <a href="https://github.com/EndlessCheng/AC-Manager" target="_blank" rel="external">AC-Manager</a> 的<code>getnum.py</code>改了下，加上了获取 <a href="http://bestcoder.hdu.edu.cn/" target="_blank" rel="external">Codeforces</a> 和 <a href="http://bestcoder.hdu.edu.cn/" target="_blank" rel="external">Bestcoder</a> 上用户 Rating 的函数，然后新建了个<code>.py</code>文件用于处理 POST 过来的<code>username</code>并调用<code>getnum.py</code>里的相关函数获取 AC 数，最后给模板传递参数并返回渲染。</p>
<p>后来应老师要求加了个校内集训队成员的刷题数榜单，入口没有放在页面上 →_→..<br>由于每查询一个账号在某个 OJ 上的 AC 数就要抓取一次页面，所以使得获取所有人 AC 数的速度很慢也经常会出现超时的情况。计划在有空的时候改成数据库 + 按需更新的形式来代替实时查询。</p>
<p>在之后和 Endless 交流时获悉爬虫有更好的实现形式（BeautifulSoup），有空再去研究下。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<h3 id="u4F20_u9001_u95E8"><a href="#u4F20_u9001_u95E8" class="headerlink" title="传送门"></a>传送门</h3></blockquote>
<p><a href="http://zscacm.sinaapp.com">一个查询在各大 OJ 上 AC 数的页面</a></p>
<h2 id="u529F_u80FD"><a href="#u529F_u80FD" class="headerlink" title="功能"></a>功能</h2><p>支持 <a href="http://poj.org">POJ</a>, <a href="http://acm.hdu.edu.cn">HDU</a>, <a href="http://210.38.224.114">ZSCOJ</a> (我校 OJ )的 AC 数查询和 <a href="http://bestcoder.hdu.edu.cn/">Codeforces</a>, <a href="http://bestcoder.hdu.edu.cn/">Bestcoder</a> 的 Rating 查询。<br>其他 OJ 暂不支持，主要是因为个人使用不怎么用到 XD</p>
<h2 id="u8D77_u56E0"><a href="#u8D77_u56E0" class="headerlink" title="起因"></a>起因</h2><p>某天老师给我发了这个 <a href="http://neuacm.sinaapp.com/index.php">neuacm 刷题榜</a>，<br>在上面那个网页查询似乎要增加到表格中去，感觉可以自己搞个来方便查询。<br>]]>
    
    </summary>
    
      <category term="HTML/CSS" scheme="http://dwayneten.com/tags/HTML-CSS/"/>
    
      <category term="Python" scheme="http://dwayneten.com/tags/Python/"/>
    
      <category term="Web" scheme="http://dwayneten.com/tags/Web/"/>
    
      <category term="网站开发" scheme="http://dwayneten.com/categories/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Codeforces Round 294 (Div. 2)]]></title>
    <link href="http://dwayneten.com/2015/03/01/CF519/"/>
    <id>http://dwayneten.com/2015/03/01/CF519/</id>
    <published>2015-03-01T12:46:17.000Z</published>
    <updated>2015-12-13T19:33:06.782Z</updated>
    <content type="html"><![CDATA[<p>感觉这套 div2 的题比往常简单。<br>很久没打 CF 了，刚好这场开始时间比较早，就打了这场。<br>赛时只出了 ABC, hack+1。<br><a id="more"></a><br><a href="http://codeforces.com/problemset/problem/519/A" target="_blank" rel="external">519A - A and B and Chess</a></p>
<blockquote>
<p>A 题很水，不同字母代表的分数不同，比较两个阵型的总分大小。</p>
</blockquote>
<p>有个小坑点是 Knight 的代表字母是 N/n 而不是 K/k，有不少人没细心看题。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*///////////////////////////////////////////////////////</span><br><span class="line">    Author        :Dwayne</span><br><span class="line">    Created Time  :2015/2/28 20:59:27</span><br><span class="line">    File Name     :CF519A.cpp</span><br><span class="line">//////////////////////////////////////////////////////<span class="comment">/*/</span><br><span class="line"></span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;cctype&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int n, m, k, tn, tcase = 0;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //freopen("in.txt", "r", stdin);</span><br><span class="line">    //freopen("out.txt", "w", stdout);</span><br><span class="line">    </span><br><span class="line">    char s[16][16];</span><br><span class="line">    for (int i=0; i&lt;8; ++i)</span><br><span class="line">        gets(s[i]);</span><br><span class="line">    map&lt;char, int&gt; mp;</span><br><span class="line">    mp['Q'] = mp['q'] = 9;</span><br><span class="line">    mp['R'] = mp['r'] = 5;</span><br><span class="line">    mp['B'] = mp['b'] = 3;</span><br><span class="line">    mp['N'] = mp['n'] = 3;</span><br><span class="line">    mp['P'] = mp['p'] = 1;</span><br><span class="line">    int cnta = 0, cntb = 0;</span><br><span class="line">    for (int i=0; i&lt;8; ++i)</span><br><span class="line">        for (int j=0; j&lt;8; ++j)</span><br><span class="line">            if (isalpha(s[i][j]))</span><br><span class="line">                if (isupper(s[i][j]))</span><br><span class="line">                    cnta += mp[s[i][j]];</span><br><span class="line">                else</span><br><span class="line">                    cntb += mp[s[i][j]];</span><br><span class="line">    if (cnta == cntb)</span><br><span class="line">        puts("Draw");</span><br><span class="line">    else</span><br><span class="line">        puts(cnta &gt; cntb ? "White" : "Black");</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure></p>
<p><a href="http://codeforces.com/problemset/problem/519/B" target="_blank" rel="external">519B - A and B and Compilation Errors</a></p>
<blockquote>
<p>给出三行数，输出第一行中第二行没有的数和第二行中第三行没有的数。</p>
</blockquote>
<p>暴力，统计 sum，xor，map皆可。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*///////////////////////////////////////////////////////</span><br><span class="line">    Author        :Dwayne</span><br><span class="line">    Created Time  :2015/2/28 21:11:21</span><br><span class="line">    File Name     :CF519B.cpp</span><br><span class="line">//////////////////////////////////////////////////////<span class="comment">/*/</span><br><span class="line"></span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int n, m, k, tn, tcase = 0;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //freopen("in.txt", "r", stdin);</span><br><span class="line">    //freopen("out.txt", "w", stdout);</span><br><span class="line">    </span><br><span class="line">    scanf("%d", &amp;n);</span><br><span class="line">    int d[100024], e[100024], f[100024];</span><br><span class="line">    for (int i=0; i&lt;n; ++i)</span><br><span class="line">        scanf("%d", &amp;d[i]);</span><br><span class="line">    for (int i=0; i&lt;n-1; ++i)</span><br><span class="line">        scanf("%d", &amp;e[i]);</span><br><span class="line">    for (int i=0; i&lt;n-2; ++i)</span><br><span class="line">        scanf("%d", &amp;f[i]);</span><br><span class="line">    sort(d, d+n);</span><br><span class="line">    sort(e, e+n-1);</span><br><span class="line">    sort(f, f+n-2);</span><br><span class="line">    for (int i=0; i&lt;n; ++i)</span><br><span class="line">        if (d[i] != e[i])</span><br><span class="line">            printf("%d\n", d[i]), i = n;</span><br><span class="line">    for (int i=0; i&lt;n-1; ++i)</span><br><span class="line">        if (e[i] != f[i])</span><br><span class="line">            printf("%d\n", e[i]), i = n;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure></p>
<p><a href="http://codeforces.com/problemset/problem/519/C" target="_blank" rel="external">519C - A and B and Team Training</a></p>
<blockquote>
<p>假设有两种人 A 和 B，且有两种组队方案<code>AAB</code>和<code>BBA</code>，给出 A 类人和 B 类人的数目 n 和 m，求最多可组几对。</p>
</blockquote>
<p>赛时用暴力过了，后来听说$$min(n, m, (n+m)/3)$$可以直接出答案。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*///////////////////////////////////////////////////////</span><br><span class="line">    Author        :Dwayne</span><br><span class="line">    Created Time  :2015/2/28 21:22:58</span><br><span class="line">    File Name     :CF519C.cpp</span><br><span class="line">//////////////////////////////////////////////////////<span class="comment">/*/</span><br><span class="line"></span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line"></span><br><span class="line">int n, m, k, tn, tcase = 0;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //freopen("in.txt", "r", stdin);</span><br><span class="line">    //freopen("out.txt", "w", stdout);</span><br><span class="line">    </span><br><span class="line">    scanf("%d %d", &amp;n, &amp;m);</span><br><span class="line">    int ans = 0, curn = n, curm = m, sum = n + m, typea = 0, typeb = 0;</span><br><span class="line">    while (sum &gt;= 3 &amp;&amp; curn &amp;&amp; curm)</span><br><span class="line">    &#123;</span><br><span class="line">        if (curn &gt;= 2 &amp;&amp; curm &gt;= 1)</span><br><span class="line">            curn -= 2, curm -= 1, sum -= 3, ans++, typea++;</span><br><span class="line">        if (curn &gt;= 1 &amp;&amp; curm &gt;= 2)</span><br><span class="line">            curn -= 1, curm -= 2, sum -= 3, ans++, typeb++;</span><br><span class="line">    &#125;</span><br><span class="line">    while (typea &amp;&amp; curm &gt;= 3)</span><br><span class="line">    &#123;</span><br><span class="line">        typeb += 2;</span><br><span class="line">        typea--;</span><br><span class="line">        ans++;</span><br><span class="line">        curm -= 3;</span><br><span class="line">    &#125;</span><br><span class="line">    while (typeb &amp;&amp; curn &gt;= 3)</span><br><span class="line">    &#123;</span><br><span class="line">        typea += 2;</span><br><span class="line">        typeb--;</span><br><span class="line">        ans++;</span><br><span class="line">        curn -= 3;</span><br><span class="line">    &#125;</span><br><span class="line">    printf("%d\n", ans);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure></p>
<p><a href="http://codeforces.com/problemset/problem/519/D" target="_blank" rel="external">519D - A and B and Interesting Substrings</a></p>
<blockquote>
<p>给出26个字母对应的值和一个字符串，求这个字符串长度大于2的子串中有多少符合以下条件的:</p>
<ul>
<li>首字母与末字母相同</li>
<li>除去首字母和末字母之后，剩下的字母对应值之和为零</li>
</ul>
</blockquote>
<p>赛后补的题，赛时以为是DP，没想出怎么解。<br>统计前缀和，若<code>sum[i] == sum[j-1]</code>(i &lt; j)那么字符串中从 i 到 j 这段对应值之和就为零。<br>然后只要扫一遍，利用<code>map</code>来标记和更新答案数即可。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*///////////////////////////////////////////////////////</span><br><span class="line">    Author        :Dwayne</span><br><span class="line">    Created Time  :2015/3/1 19:47:19</span><br><span class="line">    File Name     :CF519D.cpp</span><br><span class="line">//////////////////////////////////////////////////////<span class="comment">/*/</span><br><span class="line"></span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int n, m, k, tn, tcase = 0;</span><br><span class="line">typedef long long LL;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //freopen("in.txt", "r", stdin);</span><br><span class="line">    //freopen("out.txt", "w", stdout);</span><br><span class="line">    </span><br><span class="line">	int value[32];</span><br><span class="line">	for (int i=0; i&lt;26; ++i)</span><br><span class="line">		scanf("%d", &amp;value[i]);</span><br><span class="line">	char s[100024];</span><br><span class="line">	getchar();</span><br><span class="line">	gets(s);</span><br><span class="line">	</span><br><span class="line">	map&lt;LL, int&gt; cnt[32];</span><br><span class="line">	LL sum[100024], ans = 0;</span><br><span class="line">	sum[0] = value[0];</span><br><span class="line">	int len = strlen(s);</span><br><span class="line">	for (int i=1; i&lt;len; ++i)</span><br><span class="line">		sum[i] = sum[i-1] + value[s[i] - 'a'];</span><br><span class="line"></span><br><span class="line">	cnt[s[0] - 'a'][sum[0]]++;</span><br><span class="line">	for (int i=1; i&lt;len; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		ans += cnt[s[i] - 'a'][sum[i-1]];</span><br><span class="line">		cnt[s[i] - 'a'][sum[i]]++;</span><br><span class="line">	&#125;</span><br><span class="line">	printf("%I64d\n", ans);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure></p>
<p><a href="http://codeforces.com/problemset/problem/519/E" target="_blank" rel="external">519E - A and B and Lecture Rooms</a><br>这题还没补。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>感觉这套 div2 的题比往常简单。<br>很久没打 CF 了，刚好这场开始时间比较早，就打了这场。<br>赛时只出了 ABC, hack+1。<br>]]>
    
    </summary>
    
      <category term="Codeforces" scheme="http://dwayneten.com/tags/Codeforces/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 3040 Allowance 题解]]></title>
    <link href="http://dwayneten.com/2015/02/26/POJ-3040/"/>
    <id>http://dwayneten.com/2015/02/26/POJ-3040/</id>
    <published>2015-02-26T12:21:25.000Z</published>
    <updated>2015-12-13T19:33:10.270Z</updated>
    <content type="html"><![CDATA[<p>《挑战程序设计竞赛》练习题</p>
<blockquote>
<p>2.2 一直往前！贪心法</p>
</blockquote>
<ul>
<li>贪心</li>
</ul>
<p><a href="http://poj.org/problem?id=3040" target="_blank" rel="external">POJ 3040 Allowance</a><br>有N种硬币，需要支付的工资为M，每次支付工资至少要给M元。然后给出N种硬币的面值和数量，问最多能支付多少次工资。</p>
<hr>
<p>比较容易想到贪心策略：<br>1.先由面值从大到小地选取硬币来凑成一次工资但不能超过要支付的工资（即选出的硬币面值总和≤M）。<br>2.若经过步骤1选完后仍不够M，则再从小到大地选硬币直至选出的硬币面值总和不小于M。<br>3.重复步骤12直至剩下的硬币不够支付一次工资。<br>当然如果有硬币面值本来就比M大的可以直接发掉。<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*///////////////////////////////////////////////////////</span><br><span class="line">    Author        :Dwayne</span><br><span class="line">    Created Time  :2015/2/23 19:30:03</span><br><span class="line">    File Name     :POJ3040.cpp</span><br><span class="line">//////////////////////////////////////////////////////<span class="comment">/*/</span><br><span class="line"></span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int n, m, k, tn, tcase = 0;</span><br><span class="line">struct coin</span><br><span class="line">&#123;</span><br><span class="line">	int v, num;</span><br><span class="line">	bool operator &lt; (const coin&amp; b) const</span><br><span class="line">	&#123;</span><br><span class="line">		return (this-&gt;v &lt; b.v || (!(b.v &lt; this-&gt;v) &amp;&amp; (this-&gt;num &lt; b.num)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    freopen("in.txt", "r", stdin);</span><br><span class="line">    //freopen("out.txt", "w", stdout);</span><br><span class="line">    scanf("%d %d", &amp;n, &amp;m);</span><br><span class="line">	coin c[24];</span><br><span class="line">    for (int i=0; i&lt;n; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		scanf("%d %d", &amp;c[i].v, &amp;c[i].num);	</span><br><span class="line">	&#125;</span><br><span class="line">	sort(c, c+n);</span><br><span class="line">	<span class="comment">/*</span><br><span class="line">	for (int i=0; i&lt;n; ++i)</span><br><span class="line">		printf("%d %d\n", c[i].v, c[i].num);</span><br><span class="line">	*/</span></span><br><span class="line">	int ans = 0;</span><br><span class="line">	for (int i=n-1; i+1; --i)</span><br><span class="line">		if (c[i].v &gt;= m)</span><br><span class="line">			ans += c[i].num, c[i].num = 0;</span><br><span class="line">		else</span><br><span class="line">			break;</span><br><span class="line">	int cur = 0;</span><br><span class="line">	while (true)</span><br><span class="line">	&#123;</span><br><span class="line">		cur = 0;</span><br><span class="line">		for (int i=n-1; i+1; --i)</span><br><span class="line">		&#123;</span><br><span class="line">			while (c[i].num &amp;&amp; cur + c[i].v &lt;= m)</span><br><span class="line">				c[i].num--, cur += c[i].v;</span><br><span class="line">		&#125;</span><br><span class="line">		for (int i=0; i&lt;n; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			while (c[i].num &amp;&amp; cur &lt; m)</span><br><span class="line">				c[i].num--, cur += c[i].v;</span><br><span class="line">		&#125;</span><br><span class="line">		if (cur &gt;= m)</span><br><span class="line">			ans++;</span><br><span class="line">		else</span><br><span class="line">			break;</span><br><span class="line">	&#125;</span><br><span class="line">	printf("%d\n", ans);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>《挑战程序设计竞赛》练习题</p>
<blockquote>
<p>2.2 一直往前！贪心法</p>
</blockquote>
<ul>
<li>贪心</li>
</ul>
<p><a href="http://poj.org/problem?id=3040">POJ 3040 Allowance</a><br>有N种硬币，需要支付的工资为M，每次支付工资至少要给M元。然后给出N种硬币的面值和数量，问最多能支付多少次工资。</p>
<hr>
<p>比较容易想到贪心策略：<br>1.先由面值从大到小地选取硬币来凑成一次工资但不能超过要支付的工资（即选出的硬币面值总和≤M）。<br>2.若经过步骤1选完后仍不够M，则再从小到大地选硬币直至选出的硬币面值总和不小于M。<br>3.重复步骤12直至剩下的硬币不够支付一次工资。<br>当然如果有硬币面值本来就比M大的可以直接发掉。<br>]]>
    
    </summary>
    
      <category term="POJ" scheme="http://dwayneten.com/tags/POJ/"/>
    
      <category term="《挑战程序设计竞赛》" scheme="http://dwayneten.com/tags/%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    
      <category term="贪心" scheme="http://dwayneten.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello Blog]]></title>
    <link href="http://dwayneten.com/2015/02/26/New-Blog/"/>
    <id>http://dwayneten.com/2015/02/26/New-Blog/</id>
    <published>2015-02-26T07:28:17.000Z</published>
    <updated>2015-12-13T19:32:18.335Z</updated>
    <content type="html"><![CDATA[<p>先后换过不少博客平台，后来受不了想自己搭建一个。</p>
<h3 id="u539F_u56E0"><a href="#u539F_u56E0" class="headerlink" title="原因"></a>原因</h3><blockquote>
<ul>
<li>打开速度慢</li>
<li>不支持代码块/代码高亮</li>
<li>可自定义程度太低</li>
<li>不支持 markdown</li>
</ul>
</blockquote>
<p>这里记录一下吧。</p>
<p>首先这个博客是托管在 GitHub 上由 Hexo 驱动的，主题是 Jacman，稍微地自定义了一下。<br>在 godaddy 注册了域名，用 DNSPOD 做 DNS 解析。<br>目前打算用于 post 一些解题报告，学习笔记之类的，或许有空时写点无关紧要的东西。</p>
<p>下面是一些 markdown 的语法测试</p>
<a id="more"></a>
<h2 id="u6D4B_u8BD5"><a href="#u6D4B_u8BD5" class="headerlink" title="测试"></a>测试</h2><h3 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h3><p>写 LaTex 数学公式需要在文章开头的<code>front-matter</code>中，加上一行<code>mathjax: true</code>。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$E=mc^2$$</span><br></pre></td></tr></table></figure></p>
<p>$$E=mc^2$$</p>
<h3 id="u4EE3_u7801_u9AD8_u4EAE"><a href="#u4EE3_u7801_u9AD8_u4EAE" class="headerlink" title="代码高亮"></a>代码高亮</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Hello World!"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u8868_u683C"><a href="#u8868_u683C" class="headerlink" title="表格"></a>表格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目      | 价格   |  数量  |</span><br><span class="line">| ------    | -----: | :----: |</span><br><span class="line">| 计算机    | $1600  |   5    |</span><br><span class="line">| 手机      |   $12  |   12   |</span><br><span class="line">| 管线      |    $1  |  234   |</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="u5185_u94FE_u56FE_u7247"><a href="#u5185_u94FE_u56FE_u7247" class="headerlink" title="内链图片"></a>内链图片</h3><p>插入带有备注描述的图片<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="link_label">LOGO</span>](<span class="link_url">/img/logo.png</span>)</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/logo.png" alt="LOGO"></p>
<h3 id="u5916_u94FE_u56FE_u7247"><a href="#u5916_u94FE_u56FE_u7247" class="headerlink" title="外链图片"></a>外链图片</h3><p>用html语法插入带阴影的图片<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span> = "<span class="attribute">http:</span>//<span class="attribute">7vzsbj.com1.z0.glb.clouddn.com</span>/<span class="attribute">11.jpg</span>" <span class="attribute">class</span> = "<span class="attribute">img-shadow</span>" /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7vzsbj.com1.z0.glb.clouddn.com/11.jpg" class="img-shadow"></p>
<h3 id="u5176_u4ED6_B7_u53E6_u89C1"><a href="#u5176_u4ED6_B7_u53E6_u89C1" class="headerlink" title="其他·另见"></a>其他·另见</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一行包含<span class="strong">**加粗**</span>的文字，</span><br><span class="line">突出显示某些<span class="code">``内容 content`</span>`。</span><br><span class="line">[<span class="link_label">Markdown 语法说明</span>][<span class="link_reference">1</span>]</span><br><span class="line">[<span class="link_label">MathJax LaTeX使用方法</span>][<span class="link_reference">2</span>]</span><br><span class="line">[<span class="link_reference">1</span>]:<span class="link_url"> http://wowubuntu.com/markdown/</span></span><br><span class="line">[<span class="link_reference">2</span>]:<span class="link_url"> http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference</span></span><br></pre></td></tr></table></figure>
<p>一行包含<strong>加粗</strong>的文字，<br>突出显示某些<code>内容 content</code>。<br><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown 语法说明</a><br><a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax LaTeX使用方法</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>先后换过不少博客平台，后来受不了想自己搭建一个。</p>
<h3 id="u539F_u56E0"><a href="#u539F_u56E0" class="headerlink" title="原因"></a>原因</h3><blockquote>
<ul>
<li>打开速度慢</li>
<li>不支持代码块/代码高亮</li>
<li>可自定义程度太低</li>
<li>不支持 markdown</li>
</ul>
</blockquote>
<p>这里记录一下吧。</p>
<p>首先这个博客是托管在 GitHub 上由 Hexo 驱动的，主题是 Jacman，稍微地自定义了一下。<br>在 godaddy 注册了域名，用 DNSPOD 做 DNS 解析。<br>目前打算用于 post 一些解题报告，学习笔记之类的，或许有空时写点无关紧要的东西。</p>
<p>下面是一些 markdown 的语法测试</p>]]>
    
    </summary>
    
      <category term="日志" scheme="http://dwayneten.com/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="随笔" scheme="http://dwayneten.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows 下 gvim 的配置]]></title>
    <link href="http://dwayneten.com/2015/02/23/vim-windows/"/>
    <id>http://dwayneten.com/2015/02/23/vim-windows/</id>
    <published>2015-02-23T12:45:16.000Z</published>
    <updated>2015-12-13T20:12:10.724Z</updated>
    <content type="html"><![CDATA[<p>之前都是在 ubuntu 下用 vim，<br>前段时间笔记本不幸便当了，<br>家里台式机只有 win7，于是准备搞个 gvim 凑合。<br>装好 gvim 后发现 vimrc 文件在 gvim 的上一层目录。<br>编译环境的话装个带 MinGW 的 devc++，设置好环境变量就可以了。<br>备份一下配置。<br><a id="more"></a><br><figure class="highlight"><figcaption><span>Last update 2015-12-14 04:11:18</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">syntax on</span><br><span class="line">colorscheme desert</span><br><span class="line">set nu</span><br><span class="line">set tabstop=4</span><br><span class="line">set shiftwidth=4</span><br><span class="line">set mouse=a</span><br><span class="line">set cindent</span><br><span class="line"></span><br><span class="line">set termencoding=utf-8</span><br><span class="line">set fileencoding=utf-8</span><br><span class="line">set fileencodings=ucs-bom,utf-8,chinese,cp936</span><br><span class="line"></span><br><span class="line">map &lt;F6&gt; :call CR()&lt;CR&gt;</span><br><span class="line">func! CR()</span><br><span class="line">    exec "w"</span><br><span class="line">    exec "cd %:h"</span><br><span class="line">    exec "!g++ -O2 -g % -o %:r"</span><br><span class="line">    exec "!%:r.exe"</span><br><span class="line">endfunc</span><br><span class="line">    </span><br><span class="line">map &lt;C-A&gt; ggVG"+y</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">"inoremap ( ()&lt;LEFT&gt;</span><br><span class="line">"inoremap [ []&lt;LEFT&gt;</span><br><span class="line">"inoremap &#123; &#123;&#125;&lt;LEFT&gt;</span><br><span class="line">"inoremap " ""&lt;LEFT&gt;</span><br><span class="line">"inoremap ' ''&lt;LEFT&gt;</span><br><span class="line">      </span><br><span class="line">     </span><br><span class="line">map   &lt;F2&gt; :call SetTitle()&lt;CR&gt;</span><br><span class="line">func SetTitle()</span><br><span class="line">    let l = 0</span><br><span class="line">    let l = l + 1 | call setline(l,'/*///////////////////////////////////////////////////////')</span><br><span class="line">    let l = l + 1 | call setline(l,'    Author        :Dwayne')</span><br><span class="line">    let l = l + 1 | call setline(l,'    Created Time  :'.strftime('%c'))</span><br><span class="line">    let l = l + 1 | call setline(l,'    File Name     :'.expand('%:t'))</span><br><span class="line">    let l = l + 1 | call setline(l,'///////////////////////////////////////////////////////*/')</span><br><span class="line">    let l = l + 1 | call setline(l,'')</span><br><span class="line">    let l = l + 1 | call setline(l,'#include &lt;bits/stdc++.h&gt;')</span><br><span class="line">    let l = l + 1 | call setline(l,'using namespace std;')</span><br><span class="line">    let l = l + 1 | call setline(l,'')</span><br><span class="line">    let l = l + 1 | call setline(l,'int n, m, k, tn, tcase = 0;')</span><br><span class="line">    let l = l + 1 | call setline(l,'')</span><br><span class="line">    let l = l + 1 | call setline(l,'int main()')</span><br><span class="line">    let l = l + 1 | call setline(l,'&#123;')</span><br><span class="line">    let l = l + 1 | call setline(l,'    freopen("in.txt", "r", stdin);')</span><br><span class="line">    let l = l + 1 | call setline(l,'    //freopen("out.txt", "w", stdout);')</span><br><span class="line">    let l = l + 1 | call setline(l,'    ')</span><br><span class="line">    let l = l + 1 | call setline(l,'    scanf("%d", &amp;n);')</span><br><span class="line">    let l = l + 1 | call setline(l,'    ')</span><br><span class="line">    let l = l + 1 | call setline(l,'    return 0;')</span><br><span class="line">    let l = l + 1 | call setline(l,'&#125;')</span><br><span class="line">endfunc</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前都是在 ubuntu 下用 vim，<br>前段时间笔记本不幸便当了，<br>家里台式机只有 win7，于是准备搞个 gvim 凑合。<br>装好 gvim 后发现 vimrc 文件在 gvim 的上一层目录。<br>编译环境的话装个带 MinGW 的 devc++，设置好环境变量就可以了。<br>备份一下配置。<br>]]>
    
    </summary>
    
      <category term="vim" scheme="http://dwayneten.com/tags/vim/"/>
    
      <category term="随笔" scheme="http://dwayneten.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python - 字体批量安装工具]]></title>
    <link href="http://dwayneten.com/2014/06/14/FontInstaller/"/>
    <id>http://dwayneten.com/2014/06/14/FontInstaller/</id>
    <published>2014-06-14T04:30:28.000Z</published>
    <updated>2015-12-13T19:32:38.531Z</updated>
    <content type="html"><![CDATA[<p>做这个东西的想法是源于经理说过一个个解压装字体很麻烦<br>而且当时我也想装比较多的字体（笔记本上没什么字体）<br>于是就用 Python 边学边写了个 用时大概2-3天</p>
<p>实现了几个功能：<br>从指定文件夹</p>
<ol>
<li>解压所有<code>zip</code>压缩包到目标文件夹</li>
<li>提取所有<code>ttf</code> <code>otf</code>文件到目标文件夹</li>
<li>安装所有字体</li>
<li>删除所有非<code>ttf</code> <code>otf</code>和<code>zip</code>文件</li>
</ol>
<p>其实这些功能 bat 也能大致实现 只不过用起来没有那么友好和方便<br>这个就当尝试一下 Python 的 Tkinter 图形界面编程了</p>
<p>GitHub:<a href="https://github.com/Dwayneten/FontInstaller" target="_blank" rel="external">https://github.com/Dwayneten/FontInstaller</a><br><a id="more"></a><br>如果将来有空改进的话大概会加上</p>
<pre><code>* 支持rar压缩包
* 支持选择操作的文件类型
* …………
</code></pre><figure class="highlight python"><figcaption><span>安装部分的代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">install</span><span class="params">(self)</span>:</span></span><br><span class="line">	<span class="string">"""Install fonts from fontPath"""</span></span><br><span class="line"></span><br><span class="line">	couterInstalled = <span class="number">0</span></span><br><span class="line">	couterDeleted = <span class="number">0</span></span><br><span class="line">	<span class="comment"># judge fontpath</span></span><br><span class="line">	fontPath = self.fontPath.get()</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(fontPath):</span><br><span class="line">		self.errorFontpath()</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	<span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(fontPath):</span><br><span class="line">		<span class="keyword">for</span> fn <span class="keyword">in</span> files:</span><br><span class="line">     			<span class="comment"># get sufix</span></span><br><span class="line">			sufix = os.path.splitext(fn)[<span class="number">1</span>][<span class="number">1</span>:]</span><br><span class="line">			<span class="keyword">if</span> sufix == <span class="string">'ttf'</span> <span class="keyword">or</span> sufix == <span class="string">'TTF'</span> <span class="keyword">or</span> sufix == <span class="string">'otf'</span> <span class="keyword">or</span> sufix == <span class="string">'OTF'</span>:</span><br><span class="line">           	  	<span class="comment"># get path (change '/' to '\')</span></span><br><span class="line">				temp = <span class="string">''</span></span><br><span class="line">				<span class="keyword">for</span> c <span class="keyword">in</span> root:</span><br><span class="line">					<span class="keyword">if</span> c == <span class="string">'/'</span>:</span><br><span class="line">						temp += <span class="string">'\\'</span></span><br><span class="line">					<span class="keyword">else</span>:</span><br><span class="line">						temp += c</span><br><span class="line">         			<span class="comment"># calling vbs to install</span></span><br><span class="line">				os.system(<span class="string">'Installfont.vbs'</span>+<span class="string">' '</span>+temp+<span class="string">'\\'</span>+fn)</span><br><span class="line">				self.info.insert(END, <span class="string">'Installed: '</span>+root+<span class="string">'/'</span>+fn+<span class="string">'\n'</span>)</span><br><span class="line">				self.info.update()</span><br><span class="line">				self.info.yview(END)</span><br><span class="line">				couterInstalled += <span class="number">1</span></span><br><span class="line">			<span class="keyword">elif</span> sufix == <span class="string">'zip'</span> <span class="keyword">or</span> sufix == <span class="string">'ZIP'</span> <span class="keyword">or</span> sufix == <span class="string">'rar'</span> <span class="keyword">or</span> sufix == <span class="string">'RAR'</span>:</span><br><span class="line">				<span class="keyword">pass</span></span><br><span class="line">			<span class="keyword">elif</span> self.judDelete.get():</span><br><span class="line">				os.remove(root+<span class="string">'\\'</span>+fn)</span><br><span class="line">				self.info.insert(END, <span class="string">'Deleted: '</span>+root+<span class="string">'/'</span>+fn+<span class="string">'\n'</span>)</span><br><span class="line">				self.info.update()</span><br><span class="line">				self.info.yview(END)</span><br><span class="line">				couterDeleted += <span class="number">1</span></span><br><span class="line">	self.info.insert(END, <span class="string">'-'</span>*<span class="number">50</span>+<span class="string">'\n'</span>)</span><br><span class="line">	self.info.insert(END, <span class="string">'Installed'</span>+<span class="string">' '</span>+str(couterInstalled)+<span class="string">' Fonts.'</span>+<span class="string">'\n'</span>)</span><br><span class="line">	self.info.insert(END, <span class="string">'Deleted'</span>+<span class="string">' '</span>+str(couterDeleted)+<span class="string">' Files.'</span>+<span class="string">'\n'</span>)</span><br><span class="line">	self.info.update()</span><br><span class="line">	self.info.yview(END)</span><br></pre></td></tr></table></figure>
<p><img src="http://user-image.logdown.io/user/7784/blog/7704/post/207048/vNw9llZpREqY2Rs2hCN4_psb.jpg" alt="解压中"><br><img src="http://user-image.logdown.io/user/7784/blog/7704/post/207048/TQIJSkKTf6ydHPc3ubtg_psb%20(1" alt="安装中">.jpg)<br><img src="http://user-image.logdown.io/user/7784/blog/7704/post/207048/fjOyjJshQHeDplz5Qx8q_psb%20(2" alt="安装整理后">.jpg)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>做这个东西的想法是源于经理说过一个个解压装字体很麻烦<br>而且当时我也想装比较多的字体（笔记本上没什么字体）<br>于是就用 Python 边学边写了个 用时大概2-3天</p>
<p>实现了几个功能：<br>从指定文件夹</p>
<ol>
<li>解压所有<code>zip</code>压缩包到目标文件夹</li>
<li>提取所有<code>ttf</code> <code>otf</code>文件到目标文件夹</li>
<li>安装所有字体</li>
<li>删除所有非<code>ttf</code> <code>otf</code>和<code>zip</code>文件</li>
</ol>
<p>其实这些功能 bat 也能大致实现 只不过用起来没有那么友好和方便<br>这个就当尝试一下 Python 的 Tkinter 图形界面编程了</p>
<p>GitHub:<a href="https://github.com/Dwayneten/FontInstaller">https://github.com/Dwayneten/FontInstaller</a><br>]]>
    
    </summary>
    
      <category term="Python" scheme="http://dwayneten.com/tags/Python/"/>
    
      <category term="软件开发" scheme="http://dwayneten.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
