<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[DwayneTen]]></title>
  <subtitle><![CDATA[凤凰院天真 - 重遇再散也够绝，但嫌路太短。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://dwayneten.com/"/>
  <updated>2015-04-18T00:55:56.007Z</updated>
  <id>http://dwayneten.com/</id>
  
  <author>
    <name><![CDATA[DwayneTen]]></name>
    <email><![CDATA[Dwayne@loliplus.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[CSU 1542 Flipping Parentheses]]></title>
    <link href="http://dwayneten.com/2015/04/17/CSU1542/"/>
    <id>http://dwayneten.com/2015/04/17/CSU1542/</id>
    <published>2015-04-17T15:41:51.000Z</published>
    <updated>2015-04-18T00:55:48.521Z</updated>
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="http://acm.csu.edu.cn/OnlineJudge/problem.php?id=1542" target="_blank" rel="external">题目链接</a></h2>
<blockquote>
<h3 id="题意">题意</h3>
</blockquote>
<p>给出长度为 <em>n</em> 且匹配正确的括号序列和 <em>m</em> 个操作。<br>每次操作将对应位置上的括号取反， 即<code>(</code>变为<code>)</code>， <code>)</code>变为<code>(</code>。<br>然后要求输出每次操作后对哪个位置上的括号取反可以使整个括号序列再次符合匹配。<br>若有多个满足要求的位置， 输出最靠左端的位置。</p>
<blockquote>
<h3 id="样例输入">样例输入</h3>
</blockquote>
<p>6 3<br>( ( ( ) ) )<br>4<br>3<br>1</p>
<blockquote>
<h3 id="样例输出">样例输出</h3>
</blockquote>
<p>2<br>2<br>1</p>
<blockquote>
<h3 id="思路">思路</h3>
</blockquote>
<p>首先定义 a[i] 为 [1 - i] 里左括号减去右括号的值， 可以发现一个匹配正确的括号系列总是满足:</p>
<ul>
<li>a 数组中没有负数</li>
<li>a 数组以 0 结束</li>
</ul>
<a id="more"></a>
<p>用样例举例:</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>s</td>
<td>(</td>
<td>(</td>
<td>(</td>
<td>)</td>
<td>)</td>
<td>)</td>
</tr>
<tr>
<td>a[i]</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>2</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>第一个操作修改第 4 个括号后:</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>s</td>
<td>(</td>
<td>(</td>
<td>(</td>
<td><strong>(</strong></td>
<td>)</td>
<td>)</td>
</tr>
<tr>
<td>a[i]</td>
<td><strong><em>1</em></strong></td>
<td>2</td>
<td>3</td>
<td>2</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>可以看出， 若第 x 个括号是<code>)</code>, 将其修改成<code>(</code>后， [a[x], a[n]] 都加上了 2.<br>要使其恢复匹配即是要找一个最靠左端的 y ， y 满足 [a[y], a[n]] &gt;= 2.<br>所以要从尾端往前找， 找到第一个不满足 a[i] &gt;= 2 的即跳出， 所求的 y 就是 i + 1.<br>在这个例子， 第一个不满足的是 a[1] = 1， 所求的 y 是 1 + 1 = 2.</p>
<p>所以将第 2 个括号取反:</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>s</td>
<td>(</td>
<td><strong>)</strong></td>
<td>(</td>
<td>(</td>
<td>)</td>
<td>)</td>
</tr>
<tr>
<td>a[i]</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>整个括号序列又符合匹配了。</p>
<p>第二个操作修改第 3 个括号后:</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>s</td>
<td>(</td>
<td>)</td>
<td><strong>)</strong></td>
<td>(</td>
<td>)</td>
<td>)</td>
</tr>
<tr>
<td>a[i]</td>
<td>1</td>
<td>0</td>
<td>-1</td>
<td>0</td>
<td>-1</td>
<td>-2</td>
</tr>
<tr>
<td>d[i]</td>
<td>1</td>
<td><strong><em>-2</em></strong></td>
<td>-4</td>
<td>-4</td>
<td>-6</td>
<td>-8</td>
</tr>
</tbody>
</table>
<p>相应地可以看出， 若第 x 个括号是<code>(</code>， 将其修改成<code>)</code>后， a[a[x], a[n]] 都减去了 2.<br>对于这种情况显然地，找到最左端的<code>)</code>并将其修改成<code>(</code>就可以使括号序列重新满足匹配。<br>为此引入一个 d 数组， d[i] = a[i] - i, 那么我们要找的就是 $$min(\ i\ |\ d[i] &lt; 0 )$$</p>
<p>所以将第 2 个括号取反:</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>s</td>
<td>(</td>
<td><strong>(</strong></td>
<td>)</td>
<td>(</td>
<td>)</td>
<td>)</td>
</tr>
<tr>
<td>a[i]</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>d[i]</td>
<td>1</td>
<td>0</td>
<td>-2</td>
<td>-2</td>
<td>-4</td>
<td>-6</td>
</tr>
</tbody>
</table>
<p>至此， 两种修改都有了对应的求解策略， 需要更新维护的是区间 a[i] 的最小值用来找出不满足 a[i] &gt;= 2 的位置和区间 d[i] 的最小值用来找出最靠左端的<code>)</code>。<br>还有修改括号后的 a 数组和 d 数组的区间修改。<br>这种操作当然用线段树实现啦。</p>
<blockquote>
<h3 id="代码实现">代码实现</h3>
</blockquote>
<figure class="highlight C++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> mydebugn</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> tn, n, m, tcase = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300024</span>;</div><div class="line"><span class="keyword">char</span> paren[maxn &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> num[maxn &lt;&lt; <span class="number">2</span>], lazy[maxn &lt;&lt; <span class="number">2</span>], d[maxn &lt;&lt; <span class="number">2</span>], q, cur, ans;</div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> lson l, mid, rt &lt;&lt; 1</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> rson mid + 1, r, rt &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt; T min(T a, T b)</div><div class="line">{</div><div class="line">    <span class="keyword">return</span> a &lt; b ? a : b;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> pushup(<span class="keyword">int</span> rt)</div><div class="line">{</div><div class="line">    num[rt] = min(num[rt &lt;&lt; <span class="number">1</span>], num[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">    d[rt] = min(d[rt &lt;&lt; <span class="number">1</span>], d[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">}</div><div class="line"><span class="keyword">void</span> pushdown(<span class="keyword">int</span> rt)</div><div class="line">{</div><div class="line">    lazy[rt &lt;&lt; <span class="number">1</span>] += lazy[rt];</div><div class="line">    lazy[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += lazy[rt];</div><div class="line">    d[rt &lt;&lt; <span class="number">1</span>] += lazy[rt];</div><div class="line">    d[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += lazy[rt];</div><div class="line">    num[rt &lt;&lt; <span class="number">1</span>] += lazy[rt];</div><div class="line">    num[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += lazy[rt];</div><div class="line"></div><div class="line">    lazy[rt] = <span class="number">0</span>;</div><div class="line">}</div><div class="line"><span class="keyword">void</span> build(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> (l == r)</div><div class="line">    {</div><div class="line">        cur += paren[l] == <span class="string">'('</span> ? <span class="number">1</span> : -<span class="number">1</span>;</div><div class="line">        num[rt] = cur;</div><div class="line">        d[rt] = num[rt] - l;</div><div class="line"><span class="preprocessor">#ifdef mydebug</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, num[rt]);</div><div class="line">        <span class="keyword">if</span> (r == n)</div><div class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    build(lson);</div><div class="line">    build(rson);</div><div class="line">    pushup(rt);</div><div class="line">}</div><div class="line"><span class="keyword">void</span> update(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> (L &lt;= l && R &gt;= r)</div><div class="line">    {</div><div class="line">        lazy[rt] += x;</div><div class="line">        d[rt] += x;</div><div class="line">        num[rt] += x;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span> (lazy[rt])</div><div class="line">        pushdown(rt);</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (L &lt;= mid)</div><div class="line">        update(L, R, x, lson);</div><div class="line">    update(L, R, x, rson);</div><div class="line">    pushup(rt);</div><div class="line">}</div><div class="line"><span class="keyword">int</span> query1(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> (l == r)</div><div class="line">        <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">if</span> (lazy[rt])</div><div class="line">        pushdown(rt);</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (d[rt &lt;&lt; <span class="number">1</span>] &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> query1(lson);</div><div class="line">    <span class="keyword">return</span> query1(rson);</div><div class="line">}</div><div class="line"><span class="keyword">int</span> query2(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> (l == r)</div><div class="line">        <span class="keyword">return</span> l+<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (lazy[rt])</div><div class="line">        pushdown(rt);</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (num[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] &lt; <span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> query2(rson);</div><div class="line">    <span class="keyword">return</span> query2(lson);</div><div class="line">}</div><div class="line"><span class="keyword">void</span> showd(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> (l == r)</div><div class="line">    {</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, d[rt]);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span> (lazy[rt])</div><div class="line">        pushdown(rt);</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    showd(lson);</div><div class="line">    showd(rson);</div><div class="line">}</div><div class="line"><span class="keyword">void</span> shownum(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> (l == r)</div><div class="line">    {</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, num[rt]);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span> (lazy[rt])</div><div class="line">        pushdown(rt);</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    shownum(lson);</div><div class="line">    shownum(rson);</div><div class="line">}</div><div class="line"><span class="keyword">void</span> change(<span class="keyword">int</span> in)</div><div class="line">{</div><div class="line">    paren[in] = paren[in] == <span class="string">'('</span> ? <span class="string">')'</span> : <span class="string">'('</span>;</div><div class="line">    update(in, n, paren[in] == <span class="string">')'</span> ? -<span class="number">2</span> : <span class="number">2</span>, <span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line"><span class="preprocessor">#ifdef mydebug</span></div><div class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    <span class="built_in">puts</span>(paren+<span class="number">1</span>);</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"num:"</span>);</div><div class="line">    shownum(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"\nd:"</span>);</div><div class="line">    showd(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">}</div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line"><span class="preprocessor">#ifdef OFFLINE</span></div><div class="line">    freopen(<span class="string">"data.in"</span>, <span class="string">"r"</span>, stdin);</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %s"</span>, &n, &m, paren+<span class="number">1</span>);</div><div class="line">    build(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">while</span>(m--)</div><div class="line">    {</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &q);</div><div class="line">        change(q);</div><div class="line">        <span class="keyword">if</span> (paren[q] == <span class="string">')'</span>)</div><div class="line">            ans = query1(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            ans = query2(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        change(ans);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[附加一段文章摘要，字数最好在140字以内。]]>
    
    </summary>
    
      <category term="解题报告" scheme="http://dwayneten.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="线段树" scheme="http://dwayneten.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="构造" scheme="http://dwayneten.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="CSU" scheme="http://dwayneten.com/tags/CSU/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSU 1554 SG Value]]></title>
    <link href="http://dwayneten.com/2015/04/17/CSU1554/"/>
    <id>http://dwayneten.com/2015/04/17/CSU1554/</id>
    <published>2015-04-17T10:09:13.000Z</published>
    <updated>2015-04-18T00:52:11.010Z</updated>
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="http://acm.csu.edu.cn/OnlineJudge/problem.php?id=1554" target="_blank" rel="external">题目链接</a></h2>
<blockquote>
<h3 id="题意">题意</h3>
</blockquote>
<p>共有 <em>n</em> 个操作， 一开始集合为空集， <code>1 x</code>代表将一个 x 加入到集合中， <code>2</code>则表示查询当前集合的 SG 值， SG 值为利用当前集合内任意多个元素相加所不能得出的数中最小的正整数。</p>
<blockquote>
<h3 id="思路">思路</h3>
</blockquote>
<p>可以确认的是， 一开始当集合为空集时，SG 值为 1.<br>注意到当 SG 值为 y 时， 理所当然地利用集合内的元素必然可以组合出 [1, y) 的数。<br>然后考虑每加入一个新的元素 x 时， 对 SG 值有什么影响:</p>
<ul>
<li>对于 <code>x &lt;= SG 值</code> 的情况<br>因为之前可以组合出 [1, SG 值) 的数， 加入 x 后就可以组合出 [1， SG 值 + y) 的数， 同时原 SG 值更新为 SG 值 + y。</li>
<li>对于 <code>x &gt; SG 值</code> 的情况<br>因为 x &gt; SG 值， 所以加入 x 对目前的 SG 值没有影响， 但如果以后 SG 值变得比 x 大的话， 就会对其产生影响， 所以先将 x 存起来， 每一次 SG 值得到更新后， 提取出之前存过的数， 看其是否能更新 SG 值。</li>
</ul>
<blockquote>
<h3 id="代码实现">代码实现</h3>
</blockquote>
<a id="more"></a>
<figure class="highlight C++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*///////////////////////////////////////////////////////</span></div><div class="line">    Author        :Dwayne</div><div class="line">    Created Time  :2015/4/17 8:20:06</div><div class="line">    File Name     :CSU1554.cpp</div><div class="line">///////////////////////////////////////////////////////*/</div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k, tn, tcase = <span class="number">0</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line">LL ans;</div><div class="line"><span class="stl_container"><span class="built_in">multiset</span>&lt;LL&gt;</span>s;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &n))</div><div class="line">    {</div><div class="line">        s.clear();</div><div class="line">        ans = <span class="number">1</span>;</div><div class="line">        LL t;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</div><div class="line">        {</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &t);</div><div class="line">            <span class="keyword">if</span> (t == <span class="number">1</span>)</div><div class="line">            {</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &t);</div><div class="line">                <span class="keyword">if</span> (t &lt;= ans)</div><div class="line">                {</div><div class="line">                    ans += t;</div><div class="line">                    <span class="keyword">if</span> (s.size())</div><div class="line">                    {</div><div class="line">                        <span class="stl_container"><span class="built_in">multiset</span>&lt;LL&gt;</span>::iterator it = s.begin();</div><div class="line">                        <span class="keyword">while</span>(*it &lt;= ans && s.size())</div><div class="line">                        {</div><div class="line">                            ans += *it;</div><div class="line">                            s.erase(it);</div><div class="line">                            it = s.begin();</div><div class="line">                        }</div><div class="line">                    }</div><div class="line">                }</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    s.insert(t);</div><div class="line">            }</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[CSU 1554 SG Value]]>
    
    </summary>
    
      <category term="解题报告" scheme="http://dwayneten.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="算法" scheme="http://dwayneten.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="构造" scheme="http://dwayneten.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="CSU" scheme="http://dwayneten.com/tags/CSU/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSU 1555 Inversion Sequence]]></title>
    <link href="http://dwayneten.com/2015/04/15/CSU1555/"/>
    <id>http://dwayneten.com/2015/04/15/CSU1555/</id>
    <published>2015-04-15T04:42:56.000Z</published>
    <updated>2015-04-17T10:33:42.009Z</updated>
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="http://acm.csu.edu.cn/OnlineJudge/problem.php?id=1555" target="_blank" rel="external">题目链接</a></h2>
<blockquote>
<h3 id="题意">题意</h3>
</blockquote>
<p>原序列由 1 ~ <em>n</em> 组成<br>给出根据原序列得出的包含 <em>n</em> 个数字的序列， 第 <em>i</em> 个数字代表原序列中的 <em>i</em> 前有多少个比 <em>i</em> 大的数， 求原序列。<br>若无合法的原序列， 输出 No solution 。</p>
<blockquote>
<h3 id="思路">思路</h3>
</blockquote>
<p>不难想到采取预留空位的策略。<br>以下面的数据为例：</p>
<blockquote>
<p>输入<br>5<br>1 2 0 1 0<br>输出<br>3 1 5 2 4</p>
</blockquote>
<ol>
<li>既然 1 前面有 1 个比 1 大的数， 那么就把 1 安置在第 2 位， 前面留一个空位。</li>
<li>因为 2 的前面有 2 个比 2 大的数， 那么就在其前面预留 2 个空位， 又因为第二位已经被 1 占用了， 所以把第 1 、 3 位留作空位， 把 2 安置在第 4 位。</li>
<li>因为 3 的前面有 0 个比 3 大的数， 所以不必预留空位， 将其直接放在第一个空闲的位置上， 即第 1 位。</li>
<li>因为给 4 预留 1 个空位， 经过上面三个操作后， 第 1、 2 、 4 位都被占用了， 所以将第 3 位作为预留空位， 将 4 放在第 5 位。</li>
<li>与 3 类似， 将 5 放在第一个可用位置上， 即第 3 位。</li>
</ol>
<p>策略有了， 但是上面的每步操作如果直接暴力的话是 O(n) 的时间复杂度， 需要优化成 O(logn) 才行， 可以用线段树实现。</p>
<blockquote>
<h3 id="代码实现">代码实现</h3>
</blockquote>
<a id="more"></a>
<figure class="highlight C++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;utility&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k, tn,  tcase = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[<span class="number">65540</span>];</div><div class="line"><span class="keyword">int</span> sum[<span class="number">65540</span>];</div><div class="line"><span class="stl_container"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;</span> q;</div><div class="line"><span class="stl_container"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;</span> &gt;ans;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &n);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</div><div class="line">    {</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &d[i], &sum[i]);</div><div class="line">        <span class="keyword">if</span> (d[i] == <span class="number">1</span>)</div><div class="line">            q.push(i);</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(!q.empty())</div><div class="line">    {</div><div class="line">        <span class="keyword">int</span> from = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="comment">// 每棵树最后一个节点</span></div><div class="line">        <span class="keyword">if</span> (!d[from])</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> to = sum[from];</div><div class="line">        ans.push(make_pair(from, to));</div><div class="line">        sum[to] ^= from;</div><div class="line">        d[to]--;</div><div class="line">        <span class="keyword">if</span> (d[to] == <span class="number">1</span>)</div><div class="line">            q.push(to);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</div><div class="line">    <span class="keyword">while</span>(!ans.empty())</div><div class="line">    {</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans.front().first, ans.front().second);</div><div class="line">        ans.pop();</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[CSU 1555 Inversion Sequence]]>
    
    </summary>
    
      <category term="解题报告" scheme="http://dwayneten.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="算法" scheme="http://dwayneten.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="线段树" scheme="http://dwayneten.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="CSU" scheme="http://dwayneten.com/tags/CSU/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSU 1541 There is No Alternative]]></title>
    <link href="http://dwayneten.com/2015/04/15/CSU1541/"/>
    <id>http://dwayneten.com/2015/04/15/CSU1541/</id>
    <published>2015-04-15T04:41:05.000Z</published>
    <updated>2015-04-18T00:52:09.989Z</updated>
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="http://acm.csu.edu.cn/OnlineJudge/problem.php?id=1541" target="_blank" rel="external">题目链接</a></h2>
<blockquote>
<h3 id="题意">题意</h3>
</blockquote>
<p>求最小生成树不可替代的边的数目和这些不可替代的边的花费总和。</p>
<blockquote>
<h3 id="思路">思路</h3>
</blockquote>
<p>原先是想 DFS 找环， 加一些判断去掉某些边， 发现实现不了亦有可能是错误的。<br>其实只需先把最小生成树的总权值求出来， 然后对于每一条在最小生成树上的边， 求在去掉这条边的情况下， 原图再找最小生成树的总权值， 比较一下两个值， 若相等， 则这条边必然可以被其他边所替代， 反之若不等， 那么这条边就是我们要求的不可替代的边之一。</p>
<blockquote>
<h3 id="代码实现">代码实现</h3>
</blockquote>
<a id="more"></a>
<figure class="highlight C++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k, tn, tcase = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> p[<span class="number">512</span>], skip[<span class="number">50024</span>], ans[<span class="number">50024</span>];</div><div class="line"><span class="keyword">int</span> small, first, num, sum, cnt;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> edge</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> from, to, c;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge a) <span class="keyword">const</span></div><div class="line">    {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;c &lt; a.c;</div><div class="line">    }</div><div class="line">}e[<span class="number">50024</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> find(<span class="keyword">int</span> x)</div><div class="line">{</div><div class="line">    <span class="keyword">return</span> x == p[x] ? x : p[x] = find(p[x]);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> Kruskal()</div><div class="line">{</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</div><div class="line">        p[i] = i;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span> (skip[i])</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> x, y;</div><div class="line">        x = find(e[i].from), y = find(e[i].to);</div><div class="line">        <span class="keyword">if</span> (x != y)</div><div class="line">        {</div><div class="line">            p[x] = y;</div><div class="line">            ret += e[i].c;</div><div class="line">            <span class="keyword">if</span> (first)</div><div class="line">                ans[num++] = i;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line"><span class="preprocessor">#ifdef OFFLINE</span></div><div class="line">    freopen(<span class="string">"data.in"</span>, <span class="string">"r"</span>, stdin);</div><div class="line">    <span class="comment">//freopen("data.out", "w", stdout);</span></div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &n, &m);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &e[i].from, &e[i].to, &e[i].c);</div><div class="line"></div><div class="line">    sort(e, e+m);</div><div class="line">    first = <span class="number">1</span>;</div><div class="line">    small = Kruskal();</div><div class="line">    first = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; ++i)</div><div class="line">    {</div><div class="line">        skip[ans[i]] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (small != Kruskal())</div><div class="line">            cnt++, sum += e[ans[i]].c;</div><div class="line">        skip[ans[i]] = <span class="number">0</span>;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, cnt, sum);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[CSU 1541 There is No Alternative。]]>
    
    </summary>
    
      <category term="解题报告" scheme="http://dwayneten.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="算法" scheme="http://dwayneten.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="最小生成树" scheme="http://dwayneten.com/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="CSU" scheme="http://dwayneten.com/tags/CSU/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[考驾照 - 科目三]]></title>
    <link href="http://dwayneten.com/2015/04/14/kemusan/"/>
    <id>http://dwayneten.com/2015/04/14/kemusan/</id>
    <published>2015-04-14T15:33:19.000Z</published>
    <updated>2015-04-15T04:40:37.156Z</updated>
    <content type="html"><![CDATA[<p>13 日 17:00 左右时教练突然打电话过来叫我赶回家 14 日早上去考科目三也是醉了..<br>查了下还有两班车一班 17:20 的估计来不及了， 还好有班 18:50 的， 遂出发取钱打车去汽车客运站， 吃了桶泡面当晚餐， 车没晚点。</p>
<a id="more"></a>
<p>00:02 到高州大转盘附近， 然后就在东方大道开了半小时左右回家睡觉。<br>回家吃了两个包洗个澡都差不多两点了， 手机又没电， 还好借了我姐移动电源不然估计都起不来。</p>
<p>05:30 起床， 07：00 出发去茂名， 09:00 开始考， 几分钟就考完了 lol..<br>大概就是打灯起步、变道、增档， 四档 30+ 时速开一会儿就让靠边停车了， 一次过 233.</p>
<p>然而到茂名交委发现最早一班回中山的车也要 12:30 还是去沙溪的.. 只好在车站坐了差不多三小时 orz<br>工作日路上没什么车， 17:00 左右就到了。<br>这趟车费考试费和杂七杂八的花了差不多 700 块， 心痛。</p>
]]></content>
    <summary type="html">
    <![CDATA[考驾照 - 科目三。]]>
    
    </summary>
    
      <category term="日志" scheme="http://dwayneten.com/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="随笔" scheme="http://dwayneten.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[考驾照 - 长途]]></title>
    <link href="http://dwayneten.com/2015/04/09/kemuchangtu/"/>
    <id>http://dwayneten.com/2015/04/09/kemuchangtu/</id>
    <published>2015-04-08T16:27:06.000Z</published>
    <updated>2015-04-08T16:51:40.297Z</updated>
    <content type="html"><![CDATA[<p>之前教练打电话过来叫我清明假回去考长途， 要不然到时候科目三改成电子监考可能就比较难考了。<br>遂翘了 3 号的课回家， 还好回去得早点， 据说当晚都塞得不成样子了。<br><a id="more"></a><br>在家躺了一晚然后七点到驾校集合， 一台车包括教练七个人， 直接从驾校开始由学员开到阳江闸坡。<br>每人开 40 公里， 我是第四个， 教练讲解了下如何起步和增减档， 变换道、等红灯之类的操作。 除了途中经过市集的十字路口时车流比较混乱塞了一下之外， 基本保持 60 - 70 时速开满 40 公里就靠边停车换人。<br>到闸坡后在那个似乎叫训练中心的地方等拍照确认试遇见了之前一起考科目二的妹子。 后来和他们去海边转了一圈， 之前去过了， 感觉也没什么好玩的。<br>晚上在宾馆看电视， 翡翠台放的《岁月神偷》有点虐。</p>
<p>本来打算 5 号就回学校的， 包车的人说只有六个人所以不发车， 6 号早上的位置又被订光了， 只有下午的车。 后来坐了近 12 个小时才回到学校orz.</p>
]]></content>
    <summary type="html">
    <![CDATA[考长途的记录。]]>
    
    </summary>
    
      <category term="日志" scheme="http://dwayneten.com/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="随笔" scheme="http://dwayneten.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hihocoder 1074 字体设计]]></title>
    <link href="http://dwayneten.com/2015/03/30/hiho1074/"/>
    <id>http://dwayneten.com/2015/03/30/hiho1074/</id>
    <published>2015-03-30T15:41:15.000Z</published>
    <updated>2015-03-30T15:53:02.155Z</updated>
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="http://hihocoder.com/problemset/problem/1074" target="_blank" rel="external">题目链接</a></h2>
<blockquote>
<h3 id="题意">题意</h3>
</blockquote>
<p>给出 <em>n</em> 个数 <em>a<sub>1</sub></em> ~ <em>a<sub>n</sub></em> ， 若存在某一连续的数列 <em>a<sub>i</sub></em> ~ <em>a<sub>j</sub></em> ( i &lt; j ) :</p>
<ul>
<li>对于任何 <em>k</em> ∈  ( <em>i</em> , <em>j</em> ) 都满足 <em>a<sub>i</sub></em> &lt; <em>a<sub>k</sub></em> &lt; <em>a<sub>j</sub></em><br> 或</li>
<li>对于任何 <em>k</em> ∈  ( <em>i</em> , <em>j</em> ) 都满足 <em>a<sub>i</sub></em> &gt; <em>a<sub>k</sub></em> &gt; <em>a<sub>j</sub></em> </li>
</ul>
<p>则可以只保留 <em>a<sub>i</sub></em> 和 <em>a<sub>j</sub></em> ， 去掉 <em>a<sub>i</sub></em> 和 <em>a<sub>j</sub></em> 之间其它数。<br>求最少保留多少数和保留的数在原数列的下标(从 1 开始)。</p>
<blockquote>
<h3 id="思路">思路</h3>
</blockquote>
<p>在贪心策略下， 去掉区间 [ i, j ) 中最大数和最小数之间的数是必然最优的选择。<br>因此保留区间 [ i, j ) 中的 <em>a<sub>max</sub></em> 和 <em>a<sub>min</sub></em> ， 且可以把区间 [ i, j ) 分割成 [ i, <em>a<sub>max</sub></em> ) + [ <em>a<sub>max</sub></em> , j ) 或者 [ i, <em>a<sub>min</sub></em> ) + [ <em>a<sub>min</sub></em> , j ).<br>对分割后的区间也可以继续执行贪心策略。<br>注意到原数列首尾元素必须保留， 分割后的区间首尾元素必有其一被保留。<br>求解大区间和小区间的操作一致， 可以写成递归的形式。</p>
<blockquote>
<h3 id="题外话">题外话</h3>
</blockquote>
<p><code>min_element</code> 和 <code>max_element</code> 的 <code>Comp</code> 函数调用方式有有别于 <code>sort</code> 的 <code>Comp</code> 函数调用方式的地方。</p>
<figure class="highlight C++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// min_element</span></div><div class="line"><span class="keyword">if</span> (comp(*first,*smallest))</div><div class="line">      smallest=first;</div><div class="line">      </div><div class="line"><span class="comment">// max_element</span></div><div class="line"><span class="keyword">if</span> (comp(*largest,*first))</div><div class="line">      largest=first;</div></pre></td></tr></table></figure>

<blockquote>
<h3 id="代码实现">代码实现</h3>
</blockquote>
<a id="more"></a>
<figure class="highlight C++"><figcaption><span>hihocoder 1074 字体设计</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*///////////////////////////////////////////////////////</span></div><div class="line">    Author        :Dwayne</div><div class="line">    Created Time  :2015/3/30 18:10:26</div><div class="line">    File Name     :c.cpp</div><div class="line">///////////////////////////////////////////////////////*/</div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k, tn, tcase = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[<span class="number">100024</span>], ans[<span class="number">100024</span>], cnt;</div><div class="line"><span class="keyword">int</span> maxin, minin;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> cmp_max(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</div><div class="line">{</div><div class="line">    <span class="comment">// 题目说 ai 互不相同， 但是这里少个等号就会WA， 原因不明</span></div><div class="line">	<span class="keyword">return</span> x &lt;= y;</div><div class="line">}</div><div class="line"><span class="keyword">bool</span> cmp_min(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</div><div class="line">{</div><div class="line">	<span class="keyword">return</span> x &lt; y;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> run(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</div><div class="line">{</div><div class="line">	<span class="keyword">if</span> (!ans[l])</div><div class="line">		ans[l] = <span class="number">1</span>, cnt++;</div><div class="line">	<span class="keyword">if</span> (!ans[r])</div><div class="line">		ans[r] = <span class="number">1</span>, cnt++;</div><div class="line"></div><div class="line">	maxin = distance(a, max_element(a+l, a+r+<span class="number">1</span>, cmp_max));</div><div class="line">	minin = distance(a, min_element(a+l, a+r+<span class="number">1</span>, cmp_min));</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (maxin != l && maxin != r)</div><div class="line">	{</div><div class="line">		run(l, maxin);</div><div class="line">		run(maxin, r);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (minin != l && minin != r)</div><div class="line">	{</div><div class="line">		run(l, minin);</div><div class="line">		run(minin, r);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &n) != EOF)</div><div class="line">	{</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &a[i]), ans[i] = <span class="number">0</span>;</div><div class="line"></div><div class="line">		cnt = <span class="number">0</span>;</div><div class="line">		run(<span class="number">0</span>, n-<span class="number">1</span>);</div><div class="line"></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</div><div class="line">			<span class="keyword">if</span> (ans[i])</div><div class="line">				<span class="built_in">printf</span>(i == n-<span class="number">1</span> ? <span class="string">"%d\n"</span> : <span class="string">"%d "</span>, i+<span class="number">1</span>);</div><div class="line">	}</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[hihocoder 1074 字体设计 Solution]]>
    
    </summary>
    
      <category term="贪心" scheme="http://dwayneten.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="递归" scheme="http://dwayneten.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CF 501C Misha and Forest]]></title>
    <link href="http://dwayneten.com/2015/03/30/CF501C/"/>
    <id>http://dwayneten.com/2015/03/30/CF501C/</id>
    <published>2015-03-30T15:26:31.000Z</published>
    <updated>2015-03-30T15:53:50.754Z</updated>
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="http://codeforces.com/contest/501/problem/C" target="_blank" rel="external">题目链接</a></h2>
<blockquote>
<h3 id="题意">题意</h3>
</blockquote>
<p>给出节点的数目 <em>n</em> ， 接下来有 <em>n</em> 行， 第 <em>i</em> 行 代表第 <em>i</em> 个节点。<br>每行包括一个 <em>d<sub>i</sub></em> 和 <em>s<sub>i</sub></em> ， <em>d<sub>i</sub></em> 表示该节点与多少个节点相邻， <em>s<sub>i</sub></em> 代表所有与其相邻的节点编号相异或的值 。保证这些点组成森林。<br>要求的是这个森林里面有多少条边， 和每条边的 <em>u</em> 和 <em>v</em>， 以任意顺序输出。</p>
<blockquote>
<h3 id="思路">思路</h3>
</blockquote>
<p>一开始想的是建图， 根据异或的值来判断哪个节点和哪个节点之间有边， 但发现从这个角度无从下手去判断。<br>继而尝试从异或这个点下手。<br>我们知道异或有几个比较有用的性质：</p>
<ul>
<li>x ^ 0 = 0</li>
<li>x ^ x = 0 (偶数个相同的数相异或都等于零)</li>
<li>a ^ b = b ^ c<br>继而有</li>
<li>a ^ b = (a ^ b ^ c) ^ c</li>
</ul>
<p>然后注意到 <em>s<sub>i</sub></em> 其实“储存”了所有与第 <em>i</em> 个节点相邻的节点的编号。<br>但是怎么把它们提取出来呢？<br>回想题目， 既然给出的数据组成的是森林， 那么就一定有叶子节点。 叶子节点相比其他节点的特点就是只有一个节点与其相邻， 也就是 <em>d<sub>i</sub></em> = 1 。<br>显然， 既然相邻的节点只有一个， 我们马上就可以求出其相邻节点的编号 —— 就是 <em>s<sub>i</sub></em> 。<br>现在我们已经可以求出所有叶子节点和它父亲节点的编号， 但是这还不够， 题目要求的是整个森林的所有边。<br>我们要下一步操作是把森林中的所有的叶子和对应的边去掉来得到一个新的森林， 并且这个森林也一定存在着叶子。<br>为了实现这个操作， 利用到了上面提及的异或的性质。 我们在找到叶子节点 <em>i</em> 的父亲节点 <em>j</em> 之后， 使 <em>d<sub>j</sub></em> -= 1 并且 <em>s<sub>j</sub></em> ^= i 来将叶子节点 <em>i</em> 从森林中除去。当然， 在期间要记录一下它们之间的边作为答案。<br>可以用一个队列来存目前森林的叶子节点集合， 不断更新森林直到该队列为空时也就把所有边求出来了。</p>
<blockquote>
<h3 id="代码实现">代码实现</h3>
</blockquote>
<a id="more"></a>
<figure class="highlight C++"><figcaption><span>CF 501C Misha and Forest</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;utility&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k, tn,  tcase = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[<span class="number">65540</span>];</div><div class="line"><span class="keyword">int</span> sum[<span class="number">65540</span>];</div><div class="line"><span class="stl_container"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;</span> q;</div><div class="line"><span class="stl_container"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;</span> &gt;ans;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &n);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</div><div class="line">    {</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &d[i], &sum[i]);</div><div class="line">        <span class="keyword">if</span> (d[i] == <span class="number">1</span>)</div><div class="line">            q.push(i);</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(!q.empty())</div><div class="line">    {</div><div class="line">        <span class="keyword">int</span> from = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="comment">// 每棵树最后一个节点</span></div><div class="line">        <span class="keyword">if</span> (!d[from])</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> to = sum[from];</div><div class="line">        ans.push(make_pair(from, to));</div><div class="line">        sum[to] ^= from;</div><div class="line">        d[to]--;</div><div class="line">        <span class="keyword">if</span> (d[to] == <span class="number">1</span>)</div><div class="line">            q.push(to);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</div><div class="line">    <span class="keyword">while</span>(!ans.empty())</div><div class="line">    {</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans.front().first, ans.front().second);</div><div class="line">        ans.pop();</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[CF 501C Misha and Forest Solution]]>
    
    </summary>
    
      <category term="图论" scheme="http://dwayneten.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="构造" scheme="http://dwayneten.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="算法" scheme="http://dwayneten.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="异或" scheme="http://dwayneten.com/tags/%E5%BC%82%E6%88%96/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[查询在各大 OJ 的 AC 数]]></title>
    <link href="http://dwayneten.com/2015/03/13/zscacm/"/>
    <id>http://dwayneten.com/2015/03/13/zscacm/</id>
    <published>2015-03-13T15:21:43.000Z</published>
    <updated>2015-03-14T13:21:16.504Z</updated>
    <content type="html"><![CDATA[<blockquote>
<h3 id="传送门">传送门</h3>
</blockquote>
<p><a href="http://zscacm.sinaapp.com" target="_blank" rel="external">一个查询在各大 OJ 上 AC 数的页面</a></p>
<h2 id="功能">功能</h2>
<p>支持 <a href="http://poj.org" target="_blank" rel="external">POJ</a>, <a href="http://acm.hdu.edu.cn" target="_blank" rel="external">HDU</a>, <a href="http://210.38.224.114" target="_blank" rel="external">ZSCOJ</a> (我校 OJ )的 AC 数查询和 <a href="http://bestcoder.hdu.edu.cn/" target="_blank" rel="external">Codeforces</a>, <a href="http://bestcoder.hdu.edu.cn/" target="_blank" rel="external">Bestcoder</a> 的 Rating 查询。<br>其他 OJ 暂不支持，主要是因为个人使用不怎么用到 XD</p>
<h2 id="起因">起因</h2>
<p>某天老师给我发了这个 <a href="http://neuacm.sinaapp.com/index.php" target="_blank" rel="external">neuacm 刷题榜</a>，<br>在上面那个网页查询似乎要增加到表格中去，感觉可以自己搞个来方便查询。<br><a id="more"></a></p>
<h2 id="实现">实现</h2>
<p>想了下实现方法，应该可以直接到各 OJ 的用户资料页去抓取 AC 数，想起之前看过 <a href="https://github.com/EndlessCheng" target="_blank" rel="external">EndlessCheng</a> 的 <a href="https://github.com/EndlessCheng/AC-Manager" target="_blank" rel="external">AC-Manager</a>，实现起来应该比较简单。</p>
<p>于是开始做，在 SAE 新建了个应用，开发语言选的<code>Python</code>（其实只是没试过玩一下）。<br>前端框架直接套的<code>purecss</code>，只划了两个页面，放了几个输入框用于接收账户名。</p>
<p>把 <a href="https://github.com/EndlessCheng/AC-Manager" target="_blank" rel="external">AC-Manager</a> 的<code>getnum.py</code>改了下，加上了获取 <a href="http://bestcoder.hdu.edu.cn/" target="_blank" rel="external">Codeforces</a> 和 <a href="http://bestcoder.hdu.edu.cn/" target="_blank" rel="external">Bestcoder</a> 上用户 Rating 的函数，然后新建了个<code>.py</code>文件用于处理 POST 过来的<code>username</code>并调用<code>getnum.py</code>里的相关函数获取 AC 数，最后给模板传递参数并返回渲染。</p>
<p>后来应老师要求加了个校内集训队成员的刷题数榜单，入口没有放在页面上 →_→..<br>由于每查询一个账号在某个 OJ 上的 AC 数就要抓取一次页面，所以使得获取所有人 AC 数的速度很慢也经常会出现超时的情况。计划在有空的时候改成数据库 + 按需更新的形式来代替实时查询。</p>
<p>在之后和 Endless 交流时获悉爬虫有更好的实现形式（BeautifulSoup），有空再去研究下。</p>
]]></content>
    <summary type="html">
    <![CDATA[一个查询各大 OJ 上 AC 数的页面。]]>
    
    </summary>
    
      <category term="HTML/CSS" scheme="http://dwayneten.com/tags/HTML-CSS/"/>
    
      <category term="Python" scheme="http://dwayneten.com/tags/Python/"/>
    
      <category term="Web" scheme="http://dwayneten.com/tags/Web/"/>
    
      <category term="网站开发" scheme="http://dwayneten.com/categories/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[考驾照 - 科目二]]></title>
    <link href="http://dwayneten.com/2015/03/03/kemu2/"/>
    <id>http://dwayneten.com/2015/03/03/kemu2/</id>
    <published>2015-03-03T11:52:54.000Z</published>
    <updated>2015-04-08T16:33:40.690Z</updated>
    <content type="html"><![CDATA[<p>今天考科目二过啦。<br>上午六点起床七点出发去金山，练了大概八圈左右就被叫上车去茂名了。<br>到考场时大概十一点，我被分在15号，也就是下午场的第二批，当时估计要五六点才能考。<br>于是一直在场外看，直到同批一起去被分在7号的小伙伴上场考了我们才准备要进去。<br>看着7号那个一次通过考完后进里面等..一直等到快下午四点..不过还是比预想的要早。<br><a id="more"></a><br>上车感觉座位已经合适了就没调，教练帮忙调了下后视镜就上一档开去倒车入库了（前面考那个下车连手刹都拉啧<br><code>倒车入库</code>没什么问题，两边均匀不前不后稳得很，主要是控好车速各种调整好再停。<br><code>侧方停车</code>比较简单，看好时间打方向盘就好了。<br><code>斜坡起步</code>跟<code>S弯</code>都没什么问题，但是最后的<code>直角转弯</code>竟然<strong>压角了</strong>！<br>其实在后视镜已经看到有点危险的了，但是调整的幅度不够没救回来。<br>眼看都要出来了竟然死在最后一项还是很简单的那项orz。。<br>当时心都凉了，还好有第二次机会。<br>第二次开脚都不敢怎么松，有点僵僵的，还好所有项目都无压力通过了。<br>到最后<code>直角转弯</code>的时候特意放很慢速度然后微微站起来看后视镜来预防压线233..<br>过完<code>直角转弯</code>还没提示，出到通道时才提示考试及格，不自觉地松了一口气。<br>然后挂二档一脚油超过前面两台车回起点，一个字<strong>爽</strong>233.<br>我考科目二时全程离合+刹车来控车速可能比较奇葩，好像其他人都是只用离合不用刹车的→_→<br>可以安心回学校了，准备暑假再考科目三。</p>
]]></content>
    <summary type="html">
    <![CDATA[考科目二的记录。]]>
    
    </summary>
    
      <category term="日志" scheme="http://dwayneten.com/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="随笔" scheme="http://dwayneten.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Codeforces Round 294 (Div. 2)]]></title>
    <link href="http://dwayneten.com/2015/03/01/CF519/"/>
    <id>http://dwayneten.com/2015/03/01/CF519/</id>
    <published>2015-03-01T12:46:17.000Z</published>
    <updated>2015-03-01T13:23:40.606Z</updated>
    <content type="html"><![CDATA[<p>感觉这套 div2 的题比往常简单。<br>很久没打 CF 了，刚好这场开始时间比较早，就打了这场。<br>赛时只出了 ABC, hack+1。<br><a id="more"></a><br><a href="http://codeforces.com/problemset/problem/519/A" target="_blank" rel="external">519A - A and B and Chess</a></p>
<blockquote>
<p>A 题很水，不同字母代表的分数不同，比较两个阵型的总分大小。</p>
</blockquote>
<p>有个小坑点是 Knight 的代表字母是 N/n 而不是 K/k，有不少人没细心看题。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*///////////////////////////////////////////////////////</span></div><div class="line">    Author        :Dwayne</div><div class="line">    Created Time  :2015/2/28 20:59:27</div><div class="line">    File Name     :CF519A.cpp</div><div class="line">///////////////////////////////////////////////////////*/</div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cctype&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k, tn, tcase = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="comment">//freopen("in.txt", "r", stdin);</span></div><div class="line">    <span class="comment">//freopen("out.txt", "w", stdout);</span></div><div class="line">    </div><div class="line">    <span class="keyword">char</span> s[<span class="number">16</span>][<span class="number">16</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; ++i)</div><div class="line">        gets(s[i]);</div><div class="line">    <span class="stl_container"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;</span> mp;</div><div class="line">    mp[<span class="string">'Q'</span>] = mp[<span class="string">'q'</span>] = <span class="number">9</span>;</div><div class="line">    mp[<span class="string">'R'</span>] = mp[<span class="string">'r'</span>] = <span class="number">5</span>;</div><div class="line">    mp[<span class="string">'B'</span>] = mp[<span class="string">'b'</span>] = <span class="number">3</span>;</div><div class="line">    mp[<span class="string">'N'</span>] = mp[<span class="string">'n'</span>] = <span class="number">3</span>;</div><div class="line">    mp[<span class="string">'P'</span>] = mp[<span class="string">'p'</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> cnta = <span class="number">0</span>, cntb = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; ++i)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">8</span>; ++j)</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">isalpha</span>(s[i][j]))</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">isupper</span>(s[i][j]))</div><div class="line">                    cnta += mp[s[i][j]];</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    cntb += mp[s[i][j]];</div><div class="line">    <span class="keyword">if</span> (cnta == cntb)</div><div class="line">        <span class="built_in">puts</span>(<span class="string">"Draw"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">puts</span>(cnta &gt; cntb ? <span class="string">"White"</span> : <span class="string">"Black"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><a href="http://codeforces.com/problemset/problem/519/B" target="_blank" rel="external">519B - A and B and Compilation Errors</a></p>
<blockquote>
<p>给出三行数，输出第一行中第二行没有的数和第二行中第三行没有的数。</p>
</blockquote>
<p>暴力，统计 sum，xor，map皆可。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*///////////////////////////////////////////////////////</span></div><div class="line">    Author        :Dwayne</div><div class="line">    Created Time  :2015/2/28 21:11:21</div><div class="line">    File Name     :CF519B.cpp</div><div class="line">///////////////////////////////////////////////////////*/</div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k, tn, tcase = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="comment">//freopen("in.txt", "r", stdin);</span></div><div class="line">    <span class="comment">//freopen("out.txt", "w", stdout);</span></div><div class="line">    </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &n);</div><div class="line">    <span class="keyword">int</span> d[<span class="number">100024</span>], e[<span class="number">100024</span>], f[<span class="number">100024</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &d[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n-<span class="number">1</span>; ++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &e[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n-<span class="number">2</span>; ++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &f[i]);</div><div class="line">    sort(d, d+n);</div><div class="line">    sort(e, e+n-<span class="number">1</span>);</div><div class="line">    sort(f, f+n-<span class="number">2</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</div><div class="line">        <span class="keyword">if</span> (d[i] != e[i])</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, d[i]), i = n;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n-<span class="number">1</span>; ++i)</div><div class="line">        <span class="keyword">if</span> (e[i] != f[i])</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, e[i]), i = n;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><a href="http://codeforces.com/problemset/problem/519/C" target="_blank" rel="external">519C - A and B and Team Training</a></p>
<blockquote>
<p>假设有两种人 A 和 B，且有两种组队方案<code>AAB</code>和<code>BBA</code>，给出 A 类人和 B 类人的数目 n 和 m，求最多可组几对。</p>
</blockquote>
<p>赛时用暴力过了，后来听说$$min(n, m, (n+m)/3)$$可以直接出答案。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*///////////////////////////////////////////////////////</span></div><div class="line">    Author        :Dwayne</div><div class="line">    Created Time  :2015/2/28 21:22:58</div><div class="line">    File Name     :CF519C.cpp</div><div class="line">///////////////////////////////////////////////////////*/</div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k, tn, tcase = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="comment">//freopen("in.txt", "r", stdin);</span></div><div class="line">    <span class="comment">//freopen("out.txt", "w", stdout);</span></div><div class="line">    </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &n, &m);</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, curn = n, curm = m, sum = n + m, typea = <span class="number">0</span>, typeb = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (sum &gt;= <span class="number">3</span> && curn && curm)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span> (curn &gt;= <span class="number">2</span> && curm &gt;= <span class="number">1</span>)</div><div class="line">            curn -= <span class="number">2</span>, curm -= <span class="number">1</span>, sum -= <span class="number">3</span>, ans++, typea++;</div><div class="line">        <span class="keyword">if</span> (curn &gt;= <span class="number">1</span> && curm &gt;= <span class="number">2</span>)</div><div class="line">            curn -= <span class="number">1</span>, curm -= <span class="number">2</span>, sum -= <span class="number">3</span>, ans++, typeb++;</div><div class="line">    }</div><div class="line">    <span class="keyword">while</span> (typea && curm &gt;= <span class="number">3</span>)</div><div class="line">    {</div><div class="line">        typeb += <span class="number">2</span>;</div><div class="line">        typea--;</div><div class="line">        ans++;</div><div class="line">        curm -= <span class="number">3</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">while</span> (typeb && curn &gt;= <span class="number">3</span>)</div><div class="line">    {</div><div class="line">        typea += <span class="number">2</span>;</div><div class="line">        typeb--;</div><div class="line">        ans++;</div><div class="line">        curn -= <span class="number">3</span>;</div><div class="line">    }</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><a href="http://codeforces.com/problemset/problem/519/D" target="_blank" rel="external">519D - A and B and Interesting Substrings</a></p>
<blockquote>
<p>给出26个字母对应的值和一个字符串，求这个字符串长度大于2的子串中有多少符合以下条件的:</p>
<ul>
<li>首字母与末字母相同</li>
<li>除去首字母和末字母之后，剩下的字母对应值之和为零</li>
</ul>
</blockquote>
<p>赛后补的题，赛时以为是DP，没想出怎么解。<br>统计前缀和，若<code>sum[i] == sum[j-1]</code>(i &lt; j)那么字符串中从 i 到 j 这段对应值之和就为零。<br>然后只要扫一遍，利用<code>map</code>来标记和更新答案数即可。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*///////////////////////////////////////////////////////</span></div><div class="line">    Author        :Dwayne</div><div class="line">    Created Time  :2015/3/1 19:47:19</div><div class="line">    File Name     :CF519D.cpp</div><div class="line">///////////////////////////////////////////////////////*/</div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k, tn, tcase = <span class="number">0</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="comment">//freopen("in.txt", "r", stdin);</span></div><div class="line">    <span class="comment">//freopen("out.txt", "w", stdout);</span></div><div class="line">    </div><div class="line">	<span class="keyword">int</span> value[<span class="number">32</span>];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">26</span>; ++i)</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &value[i]);</div><div class="line">	<span class="keyword">char</span> s[<span class="number">100024</span>];</div><div class="line">	getchar();</div><div class="line">	gets(s);</div><div class="line">	</div><div class="line">	<span class="stl_container"><span class="built_in">map</span>&lt;LL, <span class="keyword">int</span>&gt;</span> cnt[<span class="number">32</span>];</div><div class="line">	LL sum[<span class="number">100024</span>], ans = <span class="number">0</span>;</div><div class="line">	sum[<span class="number">0</span>] = value[<span class="number">0</span>];</div><div class="line">	<span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;len; ++i)</div><div class="line">		sum[i] = sum[i-<span class="number">1</span>] + value[s[i] - <span class="string">'a'</span>];</div><div class="line"></div><div class="line">	cnt[s[<span class="number">0</span>] - <span class="string">'a'</span>][sum[<span class="number">0</span>]]++;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;len; ++i)</div><div class="line">	{</div><div class="line">		ans += cnt[s[i] - <span class="string">'a'</span>][sum[i-<span class="number">1</span>]];</div><div class="line">		cnt[s[i] - <span class="string">'a'</span>][sum[i]]++;</div><div class="line">	}</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><a href="http://codeforces.com/problemset/problem/519/E" target="_blank" rel="external">519E - A and B and Lecture Rooms</a><br>这题还没补。</p>
]]></content>
    <summary type="html">
    <![CDATA[Codeforces Round]]>
    
    </summary>
    
      <category term="解题报告" scheme="http://dwayneten.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="算法" scheme="http://dwayneten.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://dwayneten.com/tags/Codeforces/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 3040 Allowance 题解]]></title>
    <link href="http://dwayneten.com/2015/02/26/POJ-3040/"/>
    <id>http://dwayneten.com/2015/02/26/POJ-3040/</id>
    <published>2015-02-26T12:21:25.000Z</published>
    <updated>2015-02-26T12:46:09.482Z</updated>
    <content type="html"><![CDATA[<p>《挑战程序设计竞赛》练习题</p>
<blockquote>
<p>2.2 一直往前！贪心法</p>
</blockquote>
<ul>
<li>贪心</li>
</ul>
<p><a href="http://poj.org/problem?id=3040" target="_blank" rel="external">POJ 3040 Allowance</a><br>有N种硬币，需要支付的工资为M，每次支付工资至少要给M元。然后给出N种硬币的面值和数量，问最多能支付多少次工资。</p>
<hr>
<p>比较容易想到贪心策略：<br>1.先由面值从大到小地选取硬币来凑成一次工资但不能超过要支付的工资（即选出的硬币面值总和≤M）。<br>2.若经过步骤1选完后仍不够M，则再从小到大地选硬币直至选出的硬币面值总和不小于M。<br>3.重复步骤12直至剩下的硬币不够支付一次工资。<br>当然如果有硬币面值本来就比M大的可以直接发掉。<br><a id="more"></a></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*///////////////////////////////////////////////////////</span></div><div class="line">    Author        :Dwayne</div><div class="line">    Created Time  :2015/2/23 19:30:03</div><div class="line">    File Name     :POJ3040.cpp</div><div class="line">///////////////////////////////////////////////////////*/</div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k, tn, tcase = <span class="number">0</span>;</div><div class="line"><span class="keyword">struct</span> coin</div><div class="line">{</div><div class="line">	<span class="keyword">int</span> v, num;</div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> coin& b) <span class="keyword">const</span></div><div class="line">	{</div><div class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>-&gt;v &lt; b.v || (!(b.v &lt; <span class="keyword">this</span>-&gt;v) && (<span class="keyword">this</span>-&gt;num &lt; b.num)));</div><div class="line">	}</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, stdin);</div><div class="line">    <span class="comment">//freopen("out.txt", "w", stdout);</span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &n, &m);</div><div class="line">	coin c[<span class="number">24</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</div><div class="line">	{</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &c[i].v, &c[i].num);	</div><div class="line">	}</div><div class="line">	sort(c, c+n);</div><div class="line">	<span class="comment">/*</span></div><div class="line">	for (int i=0; i&lt;n; ++i)</div><div class="line">		printf("%d %d\n", c[i].v, c[i].num);</div><div class="line">	*/</div><div class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=n-<span class="number">1</span>; i+<span class="number">1</span>; --i)</div><div class="line">		<span class="keyword">if</span> (c[i].v &gt;= m)</div><div class="line">			ans += c[i].num, c[i].num = <span class="number">0</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">true</span>)</div><div class="line">	{</div><div class="line">		cur = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=n-<span class="number">1</span>; i+<span class="number">1</span>; --i)</div><div class="line">		{</div><div class="line">			<span class="keyword">while</span> (c[i].num && cur + c[i].v &lt;= m)</div><div class="line">				c[i].num--, cur += c[i].v;</div><div class="line">		}</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</div><div class="line">		{</div><div class="line">			<span class="keyword">while</span> (c[i].num && cur &lt; m)</div><div class="line">				c[i].num--, cur += c[i].v;</div><div class="line">		}</div><div class="line">		<span class="keyword">if</span> (cur &gt;= m)</div><div class="line">			ans++;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">	}</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[POJ 3040 Allowance 解题报告，《挑战程序设计竞赛》练习题。]]>
    
    </summary>
    
      <category term="解题报告" scheme="http://dwayneten.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="POJ" scheme="http://dwayneten.com/tags/POJ/"/>
    
      <category term="算法" scheme="http://dwayneten.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心" scheme="http://dwayneten.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="《挑战程序设计竞赛》" scheme="http://dwayneten.com/tags/%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    
      <category term="解题报告" scheme="http://dwayneten.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello Blog]]></title>
    <link href="http://dwayneten.com/2015/02/26/New-Blog/"/>
    <id>http://dwayneten.com/2015/02/26/New-Blog/</id>
    <published>2015-02-26T07:28:17.000Z</published>
    <updated>2015-03-03T12:15:55.544Z</updated>
    <content type="html"><![CDATA[<p>先后换过不少博客平台，后来受不了想自己搭建一个。</p>
<h3 id="原因">原因</h3>
<blockquote>
<ul>
<li>打开速度慢</li>
<li>不支持代码块/代码高亮</li>
<li>可自定义程度太低</li>
<li>不支持 markdown</li>
</ul>
</blockquote>
<p>这里记录一下吧。</p>
<p>首先这个博客是托管在 GitHub 上由 Hexo 驱动的，主题是 Jacman，稍微地自定义了一下。<br>在 godaddy 注册了域名，用 DNSPOD 做 DNS 解析。<br>目前打算用于 post 一些解题报告，学习笔记之类的，或许有空时写点无关紧要的东西。</p>
<p>下面是一些 markdown 的语法测试</p>
<a id="more"></a>
<h2 id="测试">测试</h2>
<h3 id="LaTeX">LaTeX</h3>
<p>写 LaTex 数学公式需要在文章开头的<code>front-matter</code>中，加上一行<code>mathjax: true</code>。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$E=mc^2$$</div></pre></td></tr></table></figure>

<p>$$E=mc^2$$</p>
<h3 id="代码高亮">代码高亮</h3>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Hello World!"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="表格">表格</h3>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">| 项目      | 价格   |  数量  |</div><div class="line">| ------    | -----: | :----: |</div><div class="line">| 计算机    | $1600  |   5    |</div><div class="line">| 手机      |   $12  |   12   |</div><div class="line">| 管线      |    $1  |  234   |</div></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="内链图片">内链图片</h3>
<p>插入带有备注描述的图片</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="link_label">LOGO</span>](<span class="link_url">/img/logo.png</span>)</div></pre></td></tr></table></figure>

<p><img src="/img/logo.png" alt="LOGO"></p>
<h3 id="外链图片">外链图片</h3>
<p>用html语法插入带阴影的图片</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span> = "<span class="attribute">http:</span>//<span class="attribute">7vzsbj.com1.z0.glb.clouddn.com</span>/<span class="attribute">11.jpg</span>" <span class="attribute">class</span> = "<span class="attribute">img-shadow</span>" /&gt;</span></div></pre></td></tr></table></figure>

<p><img src="http://7vzsbj.com1.z0.glb.clouddn.com/11.jpg" class="img-shadow"></p>
<h3 id="其他·另见">其他·另见</h3>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">一行包含<span class="strong">**加粗**</span>的文字，</div><div class="line">突出显示某些<span class="code">``内容 content`</span>`。</div><div class="line">[<span class="link_label">Markdown 语法说明</span>][<span class="link_reference">1</span>]</div><div class="line">[<span class="link_label">MathJax LaTeX使用方法</span>][<span class="link_reference">2</span>]</div><div class="line">[<span class="link_reference">1</span>]:<span class="link_url"> http://wowubuntu.com/markdown/</span><span class="link_url"></span></div><div class="line">[2]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference</div></pre></td></tr></table></figure>

<p>一行包含<strong>加粗</strong>的文字，<br>突出显示某些<code>内容 content</code>。<br><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown 语法说明</a><br><a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax LaTeX使用方法</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Hello Blog，记录和一些语法测试]]>
    
    </summary>
    
      <category term="日志" scheme="http://dwayneten.com/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="随笔" scheme="http://dwayneten.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows 下 gvim 的配置]]></title>
    <link href="http://dwayneten.com/2015/02/23/vim-windows/"/>
    <id>http://dwayneten.com/2015/02/23/vim-windows/</id>
    <published>2015-02-23T12:45:16.000Z</published>
    <updated>2015-03-03T12:15:30.319Z</updated>
    <content type="html"><![CDATA[<p>之前都是在 ubuntu 下用 vim，<br>前段时间笔记本不幸便当了，<br>家里台式机只有 win7，于是准备搞个 gvim 凑合。<br>装好 gvim 后发现 vimrc 文件在 gvim 的上一层目录。<br>编译环境的话装个带 MinGW 的 devc++，设置好环境变量就可以了。<br>备份一下配置。<br><a id="more"></a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">syntax on</div><div class="line">colorscheme desert</div><div class="line">set nu</div><div class="line">set tabstop=<span class="number">4</span></div><div class="line">set shiftwidth=<span class="number">4</span></div><div class="line">set mouse=a</div><div class="line">set cindent</div><div class="line">    </div><div class="line">map &lt;F6&gt; :call CR()&lt;CR&gt;</div><div class="line">func! CR()</div><div class="line">    exec <span class="string">"w"</span></div><div class="line">	exec <span class="string">"cd %:h"</span></div><div class="line">    exec <span class="string">"!g++ -O2 -g % -o %:r"</span></div><div class="line">	exec <span class="string">"!%:r.exe"</span></div><div class="line">endfunc</div><div class="line">    </div><div class="line">map &lt;C-A&gt; ggVG<span class="string">"+y</span></div><div class="line">     </div><div class="line">     </div><div class="line">"inoremap ( ()&lt;LEFT&gt;</div><div class="line"><span class="string">"inoremap [ []&lt;LEFT&gt;</span></div><div class="line">"inoremap { {}&lt;LEFT&gt;</div><div class="line"><span class="string">"inoremap "</span> <span class="string">""</span>&lt;LEFT&gt;</div><div class="line"><span class="string">"inoremap '</span> <span class="string">''</span>&lt;LEFT&gt;</div><div class="line">      </div><div class="line">     </div><div class="line">map   &lt;F2&gt; :call SetTitle()&lt;CR&gt;</div><div class="line">func SetTitle()</div><div class="line">    let l = <span class="number">0</span></div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">'/*///////////////////////////////////////////////////////'</span>)</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">'    Author        :Dwayne'</span>)</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">'    Created Time  :'</span>.strftime(<span class="string">'%c'</span>))</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">'    File Name     :'</span>.expand(<span class="string">'%:t'</span>))</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">'///////////////////////////////////////////////////////*/'</span>)</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">''</span>)</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">'#include &lt;cstdio&gt;'</span>)</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">'#include &lt;cstring&gt;'</span>)</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">''</span>)</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">'int n, m, k, tn, tcase = 0;'</span>)</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">''</span>)</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">'int main()'</span>)</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">'{'</span>)</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">'    freopen("</span><span class="transposed_variable">in.</span>txt<span class="string">", "</span>r<span class="string">", stdin);'</span>)</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">'    //freopen("</span><span class="transposed_variable">out.</span>txt<span class="string">", "</span>w<span class="string">", stdout);'</span>)</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">'    '</span>)</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">'    return 0;'</span>)</div><div class="line">    let l = l + <span class="number">1</span> | call setline(l,<span class="string">'}'</span>)</div><div class="line">endfunc</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[Windows下gvim的配置]]>
    
    </summary>
    
      <category term="vim" scheme="http://dwayneten.com/tags/vim/"/>
    
      <category term="随笔" scheme="http://dwayneten.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python - 字体批量安装工具]]></title>
    <link href="http://dwayneten.com/2014/06/14/FontInstaller/"/>
    <id>http://dwayneten.com/2014/06/14/FontInstaller/</id>
    <published>2014-06-14T04:30:28.000Z</published>
    <updated>2015-03-13T15:53:52.029Z</updated>
    <content type="html"><![CDATA[<p>做这个东西的想法是源于经理说过一个个解压装字体很麻烦<br>而且当时我也想装比较多的字体（笔记本上没什么字体）<br>于是就用 Python 边学边写了个 用时大概2-3天</p>
<p>实现了几个功能：<br>从指定文件夹</p>
<ol>
<li>解压所有<code>zip</code>压缩包到目标文件夹</li>
<li>提取所有<code>ttf</code> <code>otf</code>文件到目标文件夹</li>
<li>安装所有字体</li>
<li>删除所有非<code>ttf</code> <code>otf</code>和<code>zip</code>文件</li>
</ol>
<p>其实这些功能 bat 也能大致实现 只不过用起来没有那么友好和方便<br>这个就当尝试一下 Python 的 Tkinter 图形界面编程了</p>
<p>GitHub:<a href="https://github.com/Dwayneten/FontInstaller" target="_blank" rel="external">https://github.com/Dwayneten/FontInstaller</a><br><a id="more"></a><br>如果将来有空改进的话大概会加上</p>
<pre><code><span class="bullet">* </span>支持rar压缩包
<span class="bullet">* </span>支持选择操作的文件类型
<span class="bullet">* </span>…………
</code></pre><figure class="highlight python"><figcaption><span>安装部分的代码</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">install</span><span class="params">(self)</span>:</span></div><div class="line">	<span class="string">"""Install fonts from fontPath"""</span></div><div class="line"></div><div class="line">	couterInstalled = <span class="number">0</span></div><div class="line">	couterDeleted = <span class="number">0</span></div><div class="line">	<span class="comment"># judge fontpath</span></div><div class="line">	fontPath = self.fontPath.get()</div><div class="line">	<span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(fontPath):</div><div class="line">		self.errorFontpath()</div><div class="line">		<span class="keyword">return</span></div><div class="line">	<span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(fontPath):</div><div class="line">		<span class="keyword">for</span> fn <span class="keyword">in</span> files:</div><div class="line">     			<span class="comment"># get sufix</span></div><div class="line">			sufix = os.path.splitext(fn)[<span class="number">1</span>][<span class="number">1</span>:]</div><div class="line">			<span class="keyword">if</span> sufix == <span class="string">'ttf'</span> <span class="keyword">or</span> sufix == <span class="string">'TTF'</span> <span class="keyword">or</span> sufix == <span class="string">'otf'</span> <span class="keyword">or</span> sufix == <span class="string">'OTF'</span>:</div><div class="line">           	  	<span class="comment"># get path (change '/' to '\')</span></div><div class="line">				temp = <span class="string">''</span></div><div class="line">				<span class="keyword">for</span> c <span class="keyword">in</span> root:</div><div class="line">					<span class="keyword">if</span> c == <span class="string">'/'</span>:</div><div class="line">						temp += <span class="string">'\\'</span></div><div class="line">					<span class="keyword">else</span>:</div><div class="line">						temp += c</div><div class="line">         			<span class="comment"># calling vbs to install</span></div><div class="line">				os.system(<span class="string">'Installfont.vbs'</span>+<span class="string">' '</span>+temp+<span class="string">'\\'</span>+fn)</div><div class="line">				self.info.insert(END, <span class="string">'Installed: '</span>+root+<span class="string">'/'</span>+fn+<span class="string">'\n'</span>)</div><div class="line">				self.info.update()</div><div class="line">				self.info.yview(END)</div><div class="line">				couterInstalled += <span class="number">1</span></div><div class="line">			<span class="keyword">elif</span> sufix == <span class="string">'zip'</span> <span class="keyword">or</span> sufix == <span class="string">'ZIP'</span> <span class="keyword">or</span> sufix == <span class="string">'rar'</span> <span class="keyword">or</span> sufix == <span class="string">'RAR'</span>:</div><div class="line">				<span class="keyword">pass</span></div><div class="line">			<span class="keyword">elif</span> self.judDelete.get():</div><div class="line">				os.remove(root+<span class="string">'\\'</span>+fn)</div><div class="line">				self.info.insert(END, <span class="string">'Deleted: '</span>+root+<span class="string">'/'</span>+fn+<span class="string">'\n'</span>)</div><div class="line">				self.info.update()</div><div class="line">				self.info.yview(END)</div><div class="line">				couterDeleted += <span class="number">1</span></div><div class="line">	self.info.insert(END, <span class="string">'-'</span>*<span class="number">50</span>+<span class="string">'\n'</span>)</div><div class="line">	self.info.insert(END, <span class="string">'Installed'</span>+<span class="string">' '</span>+str(couterInstalled)+<span class="string">' Fonts.'</span>+<span class="string">'\n'</span>)</div><div class="line">	self.info.insert(END, <span class="string">'Deleted'</span>+<span class="string">' '</span>+str(couterDeleted)+<span class="string">' Files.'</span>+<span class="string">'\n'</span>)</div><div class="line">	self.info.update()</div><div class="line">	self.info.yview(END)</div></pre></td></tr></table></figure>

<p><img src="http://user-image.logdown.io/user/7784/blog/7704/post/207048/vNw9llZpREqY2Rs2hCN4_psb.jpg" alt="解压中"><br><img src="http://user-image.logdown.io/user/7784/blog/7704/post/207048/TQIJSkKTf6ydHPc3ubtg_psb%20(1" alt="安装中">.jpg)<br><img src="http://user-image.logdown.io/user/7784/blog/7704/post/207048/fjOyjJshQHeDplz5Qx8q_psb%20(2" alt="安装整理后">.jpg)</p>
]]></content>
    <summary type="html">
    <![CDATA[一个用Python写的字体批量安装工具]]>
    
    </summary>
    
      <category term="Python" scheme="http://dwayneten.com/tags/Python/"/>
    
      <category term="软件开发" scheme="http://dwayneten.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
